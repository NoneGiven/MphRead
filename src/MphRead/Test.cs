using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using MphRead.Effects;
using MphRead.Formats.Collision;
using OpenTK.Mathematics;

namespace MphRead
{
    public static class Test
    {
        public const int HW_CPU_CLOCK_ARM7 = 33513982;
        public const int HW_CPU_CLOCK_ARM9 = 67027964;
        public const int SND_TIMER_CLOCK = HW_CPU_CLOCK_ARM7 / 2;

        public static uint Rng1 { get; private set; } = UInt32.Parse("3DE9179B", System.Globalization.NumberStyles.HexNumber);
        public static uint Rng2 { get; private set; }

        public static uint CallRng(ref uint rng, uint value)
        {
            rng *= 0x7FF8A3ED;
            rng += 0x2AA01D31;
            return (uint)((rng >> 16) * (long)value / 0x10000L);
        }

        public static uint GetRandomInt1(uint value)
        {
            Rng1 *= 0x7FF8A3ED;
            Rng1 += 0x2AA01D31;
            return (uint)((Rng1 >> 16) * (long)value / 0x10000L);
        }

        public static uint GetRandomInt2(uint value)
        {
            Rng2 *= 0x7FF8A3ED;
            Rng2 += 0x2AA01D31;
            return (uint)((Rng2 >> 16) * (long)value / 0x10000L);
        }

        public static void SetRng1(uint value)
        {
            Rng1 = value;
        }

        public static void SetRng2(uint value)
        {
            Rng2 = value;
        }

        private static readonly Random _random = new Random();

        public static void TestEffectMath()
        {
            while (true)
            {
                uint v5 = GetRandomInt1(0x168000);
                int index1 = (int)(2 * ((16 * (((0xB60B60B60B * v5) >> 32) + 2048)) >> 20));
                int index2 = (int)(2 * ((16 * (((0xB60B60B60B * v5) >> 32) + 2048)) >> 20) + 1);
                int index3 = (int)(2 * ((((((0xB60B60B60B * v5) >> 32) + 2048) >> 12) + 0x4000) >> 4));
                int index4 = (int)(2 * ((((((0xB60B60B60B * v5) >> 32) + 2048) >> 12) + 0x4000) >> 4) + 1);
                float angle1 = index1 / 2 * (360 / 4096f);
                float angle2 = index3 / 2 * (360 / 4096f);
                Debug.Assert(index1 % 2 == 0);
                Debug.Assert(index3 % 2 == 0);
                Debug.Assert(index1 + 1 == index2);
                Debug.Assert(index3 + 1 == index4);
                Debug.Assert(index1 + 2048 == index3);
                Debug.Assert(angle1 >= 0 && angle1 < 360);
                Debug.Assert(angle2 >= 0 && angle2 < 360);
                float test = angle1 + 90;
                if (test >= 360)
                {
                    test -= 360;
                }
                Debug.Assert(test == angle2);
                //Console.WriteLine($"v5: {v5} ({v5 / 4096f} deg)");
                //Console.WriteLine($"i1: {index1} ({angle1} deg)");
                //Console.WriteLine($"i3: {index3} ({angle2} deg)");
                Nop();
            }
        }

        public static void TestEffectMathFloat()
        {
            // random angle value comes from rot_z (originally rw_field_1)
            // note: in the original fixed math, neither angle will be >= 360 because of the way the division(?) works
            // -- but also, in this case, we don't need to worry about it since we're just doing trig
            float angle = _random.Next(0x168000) / 4096f;
            float angle1 = MathHelper.DegreesToRadians(angle);
            float angle2 = MathHelper.DegreesToRadians(angle + 90);
            float cos1 = MathF.Cos(angle1);
            float sin1 = MathF.Sin(angle1);
            float cos2 = MathF.Cos(angle2);
            float sin2 = MathF.Sin(angle2);
        }

        public static void TestEffects()
        {
            foreach ((string name, string? archive) in Metadata.Effects)
            {
                if (name != "" && name != "sparksFall" && name != "mortarSecondary" && name != "powerBeamChargeNoSplatMP")
                {
                    Effect effect = Read.LoadEffect(name, archive);
                    foreach (EffectElement element in effect.Elements)
                    {
                    }
                }
            }
            Nop();
        }

        public static void TestEffectBases()
        {
            var names = new List<string>() { "deathParticle", "geo1", "particles", "particles2" };
            foreach (string name in names)
            {
                Model model = Read.GetModelInstance(name).Model;
                foreach (Material material in model.Materials)
                {
                    if (material.XRepeat == RepeatMode.Mirror || material.YRepeat == RepeatMode.Mirror)
                    {
                        Console.WriteLine($"{name} - {material.Name} ({material.TextureId}, {material.PaletteId})");
                    }
                    if (material.XRepeat == RepeatMode.Mirror)
                    {
                        Console.WriteLine($"S: {material.ScaleS}");
                    }
                    if (material.YRepeat == RepeatMode.Mirror)
                    {
                        Console.WriteLine($"T: {material.ScaleT}");
                    }
                    if (material.XRepeat == RepeatMode.Mirror || material.YRepeat == RepeatMode.Mirror)
                    {
                        Console.WriteLine();
                    }
                }
            }
            Nop();
        }

        public static int FxDiv(int a, int b)
        {
            return (int)(((long)a << 12) / b);
        }

        public static int TestFx41(IReadOnlyList<int> parameters, int percent)
        {
            int result;
            int next;
            int index1 = -1;
            int index2 = 0;
            //int percent = FxDiv(elapsed, lifespan);
            if (percent < parameters[index2 + 0])
            {
                return parameters[index2 + 1];
            }
            if (parameters[index2 + 0] != Int32.MinValue)
            {
                do
                {
                    if (parameters[index2 + 0] > percent)
                    {
                        break;
                    }
                    index1 = index2;
                    next = parameters[index2 + 2];
                    index2 += 2;
                }
                while (next != Int32.MinValue);
            }
            if (index1 == -1)
            {
                return 0;
            }
            int v7 = parameters[index1 + 2];
            if (v7 == Int32.MinValue)
            {
                result = parameters[index1 + 1];
            }
            else
            {
                result = parameters[index1 + 1] + (int)(((parameters[index1 + 3] - parameters[index1 + 1])
                    * (long)FxDiv(percent - parameters[index1 + 0], v7 - parameters[index1 + 0]) + 2048) >> 12);
                int left = (parameters[index1 + 3] - parameters[index1 + 1]);
                int right = FxDiv(percent - parameters[index1 + 0], v7 - parameters[index1 + 0]);
                int prod = (left * right + 2048) >> 12;
                int parm = parameters[index1 + 1];
                int final = parm + prod;
                Nop();
            }
            return result;
        }

        //public static int GetSfxIndex(string query)
        //{
        //    IReadOnlyList<SoundSample> samples = SoundRead.ReadSoundSamples();
        //    string[] split = query.Split(", ");
        //    var num = split.Select(s => s.StartsWith("0x") ? UInt32.Parse(s.Replace("0x", ""), NumberStyles.HexNumber) : UInt32.Parse(s)).ToList();
        //    var results = samples.Where(s => s.Header.Field0 == num[0] && s.Header.Field4 == num[1]
        //        && s.Header.Field6 == num[2] && s.Header.Field8 == num[3] && s.Header.FieldA == num[4]).ToList();
        //    if (results.Count != 1)
        //    {
        //        Debugger.Break();
        //    }
        //    return samples.IndexOf(s => s == results[0]);
        //}

        public static void TestCameraSequences()
        {
            // todo: metadata for this
            foreach (string filePath in Directory.EnumerateFiles(Path.Combine(Paths.FileSystem, "cameraEditor")))
            {
                string name = Path.GetFileNameWithoutExtension(filePath);
                if (name != "cameraEditBG")
                {
                    IReadOnlyList<CameraSequenceFrame> frames = Read.ReadCameraSequence(name);
                    Nop();
                }
            }
        }

        public static void TestCollision()
        {
            foreach (KeyValuePair<string, RoomMetadata> meta in Metadata.RoomMetadata)
            {
                CollisionInfo collision = Collision.ReadCollision(meta.Value.CollisionPath, meta.Value.FirstHunt || meta.Value.Hybrid);
                Model room = Read.GetRoomModelInstance(meta.Key).Model;
                Nop();
            }
            Nop();
        }

        public static bool TestBytes(string one, string two)
        {
            byte[] bone = File.ReadAllBytes(one);
            byte[] btwo = File.ReadAllBytes(two);
            return Enumerable.SequenceEqual(bone, btwo);
        }

        private static void WriteAllModels()
        {
            string modelPath = Path.Combine(Paths.FileSystem, "models");
            var modelFiles = new List<string>();
            var textureFiles = new List<string>();
            var animationFiles = new List<string>();
            var collisionFiles = new List<string>();
            var unknownFiles = new List<string>();
            foreach (string path in Directory.EnumerateFiles(modelPath, "", SearchOption.AllDirectories))
            {
                string pathLower = path.ToLower();
                if (pathLower.Contains("_model.bin"))
                {
                    modelFiles.Add(path);
                }
                else if (pathLower.Contains("_tex.bin"))
                {
                    textureFiles.Add(path);
                }
                else if (pathLower.Contains("_anim.bin"))
                {
                    animationFiles.Add(path);
                }
                else if (pathLower.Contains("_collision.bin"))
                {
                    collisionFiles.Add(path);
                }
                else
                {
                    unknownFiles.Add(path);
                }
            }
            var lines = new List<string>();
            lines.Add($"model ({modelFiles.Count}):");
            lines.AddRange(modelFiles.OrderBy(m => m));
            lines.Add("");
            lines.Add($"texture ({textureFiles.Count}):");
            lines.AddRange(textureFiles.OrderBy(m => m));
            lines.Add("");
            lines.Add($"animation ({animationFiles.Count}):");
            lines.AddRange(animationFiles.OrderBy(m => m));
            lines.Add("");
            lines.Add($"collision ({collisionFiles.Count}):");
            lines.AddRange(collisionFiles.OrderBy(m => m));
            lines.Add("");
            lines.Add($"unknown ({unknownFiles.Count}):");
            lines.AddRange(unknownFiles.OrderBy(m => m));
            File.WriteAllLines("models.txt", lines);
            lines.Clear();

            void AddMatch(string model, string suffix, List<string> list)
            {
                model = model.ToLower().Replace("_lod0", "").Replace("lod1", "");
                string match1 = model.Replace("_model.bin", $"_{suffix}.bin");
                string match2 = match1.Replace("_mdl", "");
                int index = list.IndexOf(f => f.ToLower() == match1 || f.ToLower() == match2);
                if (index != -1)
                {
                    lines!.Add(list[index]);
                    list.RemoveAt(index);
                }
            }

            foreach (string file in modelFiles)
            {
                lines.Add(file);
                AddMatch(file, "tex", textureFiles);
                AddMatch(file, "anim", animationFiles);
                AddMatch(file, "collision", collisionFiles);
                lines.Add("");
            }
            lines.Add("unmatched texture:");
            foreach (string file in textureFiles)
            {
                lines.Add(file);
            }
            lines.Add("");
            lines.Add("unmatched animation:");
            foreach (string file in animationFiles)
            {
                lines.Add(file);
            }
            lines.Add("");
            lines.Add("unmatched collision:");
            foreach (string file in collisionFiles)
            {
                lines.Add(file);
            }
            File.WriteAllLines("matches.txt", lines);
        }

        public static void ParseAllModels()
        {
            GetAllModels();
        }

        public static void TestAllModels()
        {
            foreach (Model model in GetAllModels())
            {
            }
        }

        public static void TestMtxRestore()
        {
            foreach (Model model in GetAllModels())
            {
                int count = 0;
                int most = -1;
                foreach (IReadOnlyList<RenderInstruction> list in model.RenderInstructionLists)
                {
                    foreach (RenderInstruction inst in list)
                    {
                        if (inst.Code == InstructionCode.MTX_RESTORE)
                        {
                            count++;
                            most = Math.Max(most, (int)inst.Arguments[0]);
                        }
                    }
                }
                if (model.Header.NodeWeightCount == 0)
                {
                    if (most != 0 || count != model.RenderInstructionLists.Count)
                    {
                        Debugger.Break();
                    }
                }
                else if (most != model.Header.NodeWeightCount - 1)
                {
                    Debugger.Break();
                }
            }
            Nop();
        }

        public static void TestAllRooms()
        {
            var ignore = new HashSet<int>() { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 23, 26 };
            for (int i = 0; i < 122; i++)
            {
                if (!ignore.Contains(i))
                {
                    RoomMetadata meta = Metadata.GetRoomById(i)!;
                }
            }
        }

        public static void TestMatrices()
        {
            // 0x020DB528 (passed to draw_animated_model from CModel_draw from draw_player)
            // updated in sub_201DCE4 -- I guess it's just the model transform?
            Matrix4x3 mtx1 = ParseMatrix48("03 F0 FF FF 00 00 00 00 9C 00 00 00 F9 FF FF FF FB 0F 00 00 3E FF FF FF 64 FF FF FF 3E FF FF FF 08 F0 FF FF 22 00 00 00 86 40 00 00 F1 AD FD FF");
            // 0x220DA430 (constant?)
            Matrix4x3 mtx2 = ParseMatrix48("FD 0F 00 00 D3 FF FF FF 97 00 00 00 00 00 00 00 53 0F 00 00 9B 04 00 00 62 FF FF FF 66 FB FF FF 50 0F 00 00 F4 E8 FF FF DA 0B FF FF BF F8 01 00");
            // concatenation result
            Matrix4x3 currentTextureMatrix = ParseMatrix48("FF EF FF FF 00 00 00 00 FE FF FF FF 00 00 00 00 86 0F 00 00 DF 03 00 00 01 00 00 00 DF 03 00 00 7A F0 FF FF 00 00 00 00 7F F4 FF FF CA D2 FF FF");
            Matrix4x3 mult = Matrix.Concat43(mtx1, mtx2);

            var trans = new Matrix4(
                new Vector4(mtx1.Row0, 0.0f),
                new Vector4(mtx1.Row1, 0.0f),
                new Vector4(mtx1.Row2, 0.0f),
                new Vector4(mtx1.Row3, 1.0f)
            );
            Vector3 pos = trans.ExtractTranslation();
            Vector3 rot = trans.ExtractRotation().ToEulerAngles();
            rot = new Vector3(
                MathHelper.RadiansToDegrees(rot.X),
                MathHelper.RadiansToDegrees(rot.Y),
                MathHelper.RadiansToDegrees(rot.Z)
            );
            Vector3 scale = trans.ExtractScale();
        }

        // 4F4 update for alt forms in sub_201DCE4
        public static void TestLogic1()
        {
            Hunter hunter = 0;
            int flags = 0;
            int v45 = 0;

            if (hunter == Hunter.Noxus)
            {

            }
            else if (hunter > Hunter.Samus && hunter != Hunter.Spire)
            {
                if (hunter == Hunter.Kanden)
                {
                    /* call sub_202657C */
                }
                else // Trace, Sylux, Weavel, Guardian
                {

                }
            }
            else // Samus, Spire
            {
                // the "404 + 64" used in the vector setup seems to point to fx32 0.5
                // might be a modifier for movement speed, or terrain angle?
                if (hunter > Hunter.Samus || (flags & 0x80) > 0) // Spire OR colliding with platform
                {
                    /* v45 vector setup 1 */
                    // (?) calculate vector based on speed
                    v45 = 1;
                }
                else // Samus AND !(colliding with platform)
                {
                    /* v45 vector setup 2 */
                    // calculate vector based on current and previous position
                    v45 = 2;
                }
                if (v45 > 0)
                {
                    /* matrix setup */
                    if (hunter == Hunter.Samus)
                    {
                        /* 4F4 matrix concat */
                    }
                    /* 4F4 cross product and normalize */
                    if (hunter == Hunter.Spire)
                    {
                        /* 4F4 matrix multiplication */
                    }
                }
            }
        }

        [Flags]
        public enum SomeFlags : uint
        {
            None = 0x0,
            SurfaceCollision = 0x10,
            PlatformCollision = 0x80,
            UsedJump = 0x100,
            AltForm = 0x200,
            DrawAltForm = 0x400,
            BlockAiming = 0x1000000,
            WeaponMenu = 0x2000000,
            DrawGunSmoke = 0x80000000
        }

        [Flags]
        public enum MoreFlags : uint
        {
            None = 0x0,
            FullCharge = 0x1,
            HideModel = 0x2,
            WeaponFiring = 0x4,
            AltFormAttack = 0x8
        }

        public class CPlayer
        {
            public Vector3 Position { get; set; }
            public Hunter Hunter { get; set; }
            public SomeFlags SomeFlags { get; set; }
            public MoreFlags MoreFlags { get; set; }
            public CModel Model { get; set; } = null!;
            public CModel Gun { get; set; } = null!;
            public CModel GunSmoke { get; set; } = null!;
            public Matrix4x3 SomeMatrix { get; set; }
            public byte Field4BB { get; set; }
            public CModel Field1A4 { get; set; } = null!;
            public uint Health { get; set; }
            public int Field358 { get; set; }
            public int Field6D0 { get; set; }
            public Vector3 Field64 { get; set; }
            public Vector3 FieldB4 { get; set; }
            public short FieldE2 { get; set; }
            public byte Field4D6 { get; set; }
            public int Field550 { get; set; }
            public int Field46C { get; set; }
        }

        public class CModel
        {
            public MModel Model { get; set; } = null!;
            public short SomeFlag { get; set; }
            public CNodeAnimation NodeAnimation { get; set; } = null!;
        }

        public class CNodeAnimation
        {
            public UIntPtr NodeAnimation { get; set; }
        }

        public class MModel
        {
            public UIntPtr NodeAnimation { get; set; }
            public byte Flags { get; set; }
            public float Scale { get; set; }
        }

        // (?) determine if other Hunters are visible based on partial room?
        private static bool IsVisibleMaybe(CPlayer player)
        {
            return player != null;
        }

        private static readonly MModel _mdl200D960 = null!;

        private static readonly MModel _mdl200D938 = null!;

        private static readonly MModel _mdl200E490 = null!;

        private static readonly Matrix4x3 _mtx20D955C = Matrix4x3.Zero;

        private static readonly Matrix4x3 _viewMatrix = Matrix4x3.Zero;

        private static Matrix4x3 _currentTextureMatrix = Matrix4x3.Zero;

        private static readonly int _mem20E97B0 = 0;

        private static readonly int _mem20DA5D0 = 0;

        private static int _mem20E3EA0 = 0;

        private static readonly int _gameState = 2;

        // ???
        private static void Memory1FF8000()
        {
        }

        private static void CModelDraw(CModel model, Matrix4x3 someMatrix)
        {
            DrawAnimatedModel(model.Model, someMatrix, (byte)model.SomeFlag);
        }

        private static void DrawAnimatedModel(MModel model, Matrix4x3 texMatrix, byte flags)
        {
            Matrix4x3 currentTextureMatrix;
            if ((model.Flags & 1) > 0) // if any materials have lighting enabled
            {
                if (model.Scale == 1)
                {
                    currentTextureMatrix = Matrix.Concat43(texMatrix, _viewMatrix);
                }
                else
                {
                    var scaleMatrix = Matrix4x3.CreateScale(model.Scale);
                    currentTextureMatrix = Matrix.Concat43(scaleMatrix, texMatrix);
                    currentTextureMatrix = Matrix.Concat43(currentTextureMatrix, _viewMatrix);
                }
            }
            else
            {
                if (model.Scale == 1)
                {
                    currentTextureMatrix = texMatrix;
                }
                else
                {
                    var scaleMatrix = Matrix4x3.CreateScale(model.Scale);
                    currentTextureMatrix = Matrix.Concat43(scaleMatrix, texMatrix);
                }
            }
            _currentTextureMatrix = currentTextureMatrix;
            _mem20E3EA0 = 0;
            if (model.NodeAnimation != UIntPtr.Zero)
            {
                if ((flags & 1) > 0) // ???
                {
                    Memory1FF8000();
                }
                else
                {
                    Memory1FF8000();
                    _mem20E3EA0 = -2147483648;
                }
            }
            // later, in normal texgen:
            if (_mem20E3EA0 >= 0)
            {
                // node_transform * current_texture_matrix
            }
            else
            {
                // node_transform only
            }
        }

        private static void CModelInitializeAnimationData(CModel model)
        {
            CNodeAnimationSetData(model.Model, model.NodeAnimation.NodeAnimation);
        }

        private static void CNodeAnimationSetData(MModel model, UIntPtr nodeAnimation)
        {
            model.NodeAnimation = nodeAnimation;
        }

        // model draw calls in draw_player
        public static void TestLogic2(CPlayer player, int playerId)
        {
            if (!player.MoreFlags.HasFlag(MoreFlags.HideModel))
            {
                if (player.Hunter == Hunter.Spire && player.MoreFlags.HasFlag(MoreFlags.AltFormAttack))
                {
                    CModelInitializeAnimationData(player.Model);
                }
                if (playerId == 0 || IsVisibleMaybe(player))
                {
                    // one of these must be checking if the player is P1 but the camera is third person
                    bool v10 = (
                        playerId != 0
                        || player.Field4D6 != 0
                        // (unsigned __int8)tmp_player->field_550 < (signed int)*(unsigned __int16 *)(tmp_player->field_404 + 104)
                        || player.Field550 < player.Field46C
                        || _mem20DA5D0 != 0
                    );
                    if (player.SomeFlags.HasFlag(SomeFlags.AltForm))
                    {
                        if (player.Hunter == Hunter.Kanden)
                        {
                            CNodeAnimationSetData(player.Model.Model, UIntPtr.Zero);
                            CModelDraw(player.Model, _mtx20D955C);
                            CNodeAnimationSetData(player.Model.Model, player.Model.NodeAnimation.NodeAnimation);
                        }
                        else if (player.Hunter == Hunter.Spire)
                        {
                            if (player.MoreFlags.HasFlag(MoreFlags.AltFormAttack))
                            {
                                CModelInitializeAnimationData(player.Model);
                                CNodeAnimationSetData(player.Model.Model, UIntPtr.Zero);
                                var matrix = Matrix4x3.CreateTranslation(player.Position);
                                DrawAnimatedModel(_mdl200D960, matrix, (byte)player.Model.SomeFlag);
                            }
                            else
                            {
                                CModelDraw(player.Model, player.SomeMatrix);
                            }
                        }
                        else
                        {
                            CModelDraw(player.Model, player.SomeMatrix);
                        }
                        if (player.Field4BB != 0)
                        {
                            // v52 = sub_20AC718(tmp_player->field_108.data.sphere.radius);
                            // v54 = sub_20AC190(dword_200D970, dword_200D974, v52, v53);
                            // v55 = sub_20AC5AC(v54);
                            int v55 = 1;
                            var scaleMatrix = Matrix4x3.CreateScale(v55);
                            Matrix4x3 matrix = Matrix.Concat43(scaleMatrix, player.SomeMatrix);
                            CModelDraw(player.Field1A4, matrix);
                        }
                    }
                    else if (v10)
                    {
                        if (player.Health > 0)
                        {
                            // v171 (???)
                            Matrix4x3 matrix = Matrix4x3.Zero;
                            DrawAnimatedModel(_mdl200D938, matrix, flags: 0);
                            if (player.Field4BB != 0)
                            {
                                CModelDraw(player.Field1A4, matrix);
                            }
                        }
                    }
                    else
                    {
                        if (player.Field358 != 0 || player.Field6D0 != 0)
                        {

                        }
                        else
                        {
                            Matrix3 transform = Matrix.GetTransform3(player.Field64, player.FieldB4);
                            var matrix = new Matrix4x3(transform.Row0, transform.Row1, transform.Row2, new Vector3());
                            CModelDraw(player.Gun, matrix);
                            if (player.SomeFlags.HasFlag(SomeFlags.DrawGunSmoke))
                            {
                                CModelDraw(player.GunSmoke, matrix);
                            }
                        }
                    }
                }
                // if ( *((_BYTE *)off_200E484 + 36) )
                // if ( LOBYTE(tmp_player->field_E2) )
                // if ( LOBYTE(tmp_player->field_E2) <= 0x77 )
                if (_gameState == 2 && playerId == 0 && _mem20E97B0 != 0 && player.FieldE2 <= 0x77)
                {
                    //v155 = off_200D924;
                    //v156 = off_200E48C[0][1];
                    //v157 = off_200E48C[0][2];
                    //off_200D924->m[9] = *off_200E48C[0];
                    //v155->m[10] = v156;
                    //v155->m[11] = v157;
                    Matrix4x3 matrix = Matrix4x3.Zero;
                    DrawAnimatedModel(_mdl200E490, matrix, flags: 0);
                }
            }
        }

        private static string EnumToString<T>(T value) where T : Enum
        {
            string name = typeof(T).Name;
            return $"{name}.{value}".Replace(", ", $" | {name}.");
        }

        public static void TestWeaponInfo()
        {
            IReadOnlyList<WeaponInfo> weapons1P = Weapons.Weapons1P;
            IReadOnlyList<WeaponInfo> weaponsMP = Weapons.WeaponsMP;
            IReadOnlyList<WeaponInfo> enemies = Weapons.EnemyWeapons;
            IReadOnlyList<WeaponInfo> platforms = Weapons.PlatformWeapons;
            IReadOnlyList<WeaponInfo> ricochets = Weapons.Ricochets;

            foreach (WeaponInfo weapon in enemies)
            {
                var ids = new HashSet<ushort>();
                ids.Add(weapon.DrawFuncIds[0]);
                ids.Add(weapon.DrawFuncIds[1]);
                if (ids.Contains(6) || ids.Contains(12))
                {
                    Debugger.Break();
                }
            }

            Nop();

            for (int i = 0; i < 9; i++)
            {
                WeaponInfo singleNormal = weapons1P[i];
                WeaponInfo multiNormal = weaponsMP[i];
                WeaponInfo singleAffinity = weapons1P[i + 9];
                WeaponInfo multiAffinity = weaponsMP[i + 9];

                Console.WriteLine(singleNormal.Name);
                Console.WriteLine($"1P Nrm: {singleNormal.UnchargedSpread} / {singleNormal.MinChargeSpread} / {singleNormal.ChargedSpread}");
                Console.WriteLine($"MP Nrm: {multiNormal.UnchargedSpread} / {multiNormal.MinChargeSpread} / {multiNormal.ChargedSpread}");
                Console.WriteLine($"1P Aff: {singleAffinity.UnchargedSpread} / {singleAffinity.MinChargeSpread} / {singleAffinity.ChargedSpread}");
                Console.WriteLine($"MP Aff: {multiAffinity.UnchargedSpread} / {multiAffinity.MinChargeSpread} / {multiAffinity.ChargedSpread}");
                Console.WriteLine();

                //int bit = 9;
                //uint mask = (uint)Math.Pow(2, bit);
                //bool snTest = (singleNormal.Flags & mask) != 0;
                //bool mnTest = (multiNormal.Flags & mask) != 0;
                //bool saTest = (singleAffinity.Flags & mask) != 0;
                //bool maTest = (multiAffinity.Flags & mask) != 0;
                //var results = new HashSet<bool>();
                //results.Add(snTest);
                //results.Add(mnTest);
                //results.Add(saTest);
                //results.Add(maTest);
                //if (results.Count != 1)
                //{
                //    Debugger.Break();
                //}
                //Console.WriteLine(singleNormal.Name);
                //Console.WriteLine($"1P Nrm: {snTest}");
                //Console.WriteLine($"MP Nrm: {mnTest}");
                //Console.WriteLine($"1P Aff: {saTest}");
                //Console.WriteLine($"MP Aff: {maTest}");
                //Console.WriteLine();
            }

            Nop();

            //for (int i = 0; i < ricochets.Count; i++)
            //{
            //    WeaponInfo weapon = ricochets[i];
            //    if (weapon.Description != "")
            //    {
            //        Console.WriteLine(weapon.Description);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"{i} / {weapon.Weapon} / {weapon.WeaponType}");
            //    }
            //    Console.WriteLine($"{weapon.DrawFuncIds[0]} {weapon.DrawFuncIds[1]}");
            //    Console.WriteLine();
            //}

            //static void WriteStuff(WeaponInfo w, bool aff, bool mp)
            //{
            //    Console.WriteLine($"{w.Name}" + (aff ? " (AF)" : "(NM)") + (mp ? " (MP)" : " (1P)"));
            //    byte afl1 = w.Afflictions[0];
            //    string str1 = "";
            //    if ((afl1 & 1) != 0)
            //    {
            //        str1 += "Frz ";
            //    }
            //    if ((afl1 & 2) != 0)
            //    {
            //        str1 += "Dis ";
            //    }
            //    if ((afl1 & 4) != 0)
            //    {
            //        str1 += "Brn ";
            //    }
            //    Debug.Assert((afl1 & 0xF8) == 0);
            //    byte afl2 = w.Afflictions[1];
            //    string str2 = "";
            //    if ((afl2 & 1) != 0)
            //    {
            //        str2 += "Frz ";
            //    }
            //    if ((afl2 & 2) != 0)
            //    {
            //        str2 += "Dis ";
            //    }
            //    if ((afl2 & 4) != 0)
            //    {
            //        str2 += "Brn ";
            //    }
            //    str1 = str1.Trim();
            //    str2 = str2.Trim();
            //    Debug.Assert((afl2 & 0xF8) == 0);
            //    Console.WriteLine($"{str1} / {str2}");
            //}

            //for (int i = 0; i < 9; i++)
            //{
            //    WriteStuff(weapons1P[i], false, false);
            //    WriteStuff(weapons1P[i + 9], true, false);
            //    WriteStuff(weaponsMP[i], false, true);
            //    WriteStuff(weaponsMP[i + 9], true, true);
            //    Console.WriteLine();
            //}
        }

        public static IReadOnlyList<RawWeaponInfo> ParseWeaponInfo(int count, byte[] array)
        {
            int size = Marshal.SizeOf<RawWeaponInfo>();
            Debug.Assert(size == 0xF0);
            var results = new List<RawWeaponInfo>();
            var bytes = new ReadOnlySpan<byte>(array);
            Debug.Assert(bytes.Length == count * size);
            for (int i = 0; i < count; i++)
            {
                int start = i * size;
                int end = start + size;
                results.Add(Read.ReadStruct<RawWeaponInfo>(bytes[start..end]));
                //results.Add(MemoryMarshal.Read<WeaponInfo>(bytes[start..end]));
            }
            return results;
        }

        public static void DumpWeaponInfo(RawWeaponInfo weapon)
        {
            Console.WriteLine($@"            new WeaponInfo(
                description: """",
                weapon: BeamType.{weapon.Weapon},
                weaponType: BeamType.{weapon.WeaponType},
                drawFuncIds: new byte[] {{ {weapon.DrawFuncIds[0]}, {weapon.DrawFuncIds[1]} }},
                colors: new ushort[] {{ {weapon.Colors[0]}, {weapon.Colors[1]} }},
                flags: {EnumToString(weapon.Flags)},
                splashDamage: {weapon.SplashDamage},
                minChargeSplashDamage: {weapon.MinChargeSplashDamage},
                chargedSplashDamage: {weapon.ChargedSplashDamage},
                splashDmgTypes: new byte[] {{ {weapon.SplashDmgTypes[0]}, {weapon.SplashDmgTypes[1]} }},
                shotCooldown: {weapon.ShotCooldown},
                shotCooldownRelated: {weapon.ShotCooldownRelated},
                ammoType: {weapon.AmmoType},
                beamTypes: new byte[] {{ {weapon.BeamTypes[0]}, {weapon.BeamTypes[1]} }},
                muzzleEffects: new byte[] {{ {weapon.MuzzleEffects[0]}, {weapon.MuzzleEffects[1]} }},
                dmgDirTypes: new byte[] {{ {weapon.DmgDirTypes[0]}, {weapon.DmgDirTypes[1]} }},
                field1D: new byte[] {{ {weapon.Field1D[0]}, {weapon.Field1D[1]} }},
                afflictions: new Affliction[] {{ {EnumToString(weapon.Afflictions[0])}, {EnumToString(weapon.Afflictions[1])} }},
                field21: {weapon.Field21},
                minCharge: {weapon.MinCharge},
                fullCharge: {weapon.FullCharge},
                ammoCost: {weapon.AmmoCost},
                minChargeCost: {weapon.MinChargeCost},
                chargeCost: {weapon.ChargeCost},
                unchargedDamage: {weapon.UnchargedDamage},
                minChargeDamage: {weapon.MinChargeDamage},
                chargedDamage: {weapon.ChargedDamage},
                headshotDamage: {weapon.HeadshotDamage},
                minChargeHeadshotDamage: {weapon.MinChargeHeadshotDamage},
                chargedHeadshotDamage: {weapon.ChargedHeadshotDamage},
                unchargedLifespan: {weapon.UnchargedLifespan},
                minChargeLifespan: {weapon.MinChargeLifespan},
                chargedLifespan: {weapon.ChargedLifespan},
                speedDecay: new ushort[] {{ {weapon.SpeedDecay[0]}, {weapon.SpeedDecay[1]} }},
                field42: {weapon.Field42},
                speedInterp: new ushort[] {{ {weapon.SpeedInterp[0]}, {weapon.SpeedInterp[1]} }},
                field48: {weapon.Field48},
                field4C: {weapon.Field4C},
                field50: {weapon.Field50},
                field54: {weapon.Field54},
                field58: {weapon.Field58},
                field5C: {weapon.Field5C},
                field60: {weapon.Field60},
                unchargedSpeed: {weapon.UnchargedSpeed},
                minChargeSpeed: {weapon.MinChargeSpeed},
                chargedSpeed: {weapon.ChargedSpeed},
                unchargedFinalSpeed: {weapon.UnchargedFinalSpeed},
                minChargeFinalSpeed: {weapon.MinChargeFinalSpeed},
                chargedFinalSpeed: {weapon.ChargedFinalSpeed},
                unchargedGravity: {weapon.UnchargedGravity},
                minChargeGravity: {weapon.MinChargeGravity},
                chargedGravity: {weapon.ChargedGravity},
                unchargedHoming: {weapon.UnchargedHoming},
                minChargeHoming: {weapon.MinChargeHoming},
                chargedHoming: {weapon.ChargedHoming},
                homingRange: {weapon.HomingRange},
                homingTolerance: {weapon.HomingTolerance},
                unchargedScale: {weapon.UnchargedScale},
                minChargeScale: {weapon.MinChargeScale},
                chargedScale: {weapon.ChargedScale},
                unchargedDistance: {weapon.UnchargedDistance},
                minChargeDistance: {weapon.MinChargeDistance},
                chargedDistance: {weapon.ChargedDistance},
                unchargedSpread: {weapon.UnchargedSpread},
                minChargeSpread: {weapon.MinChargeSpread},
                chargedSpread: {weapon.ChargedSpread},
                fieldC0: {weapon.FieldC0},
                fieldC4: {weapon.FieldC4},
                fieldC8: {weapon.FieldC8},
                fieldCC: {weapon.FieldCC},
                fieldD0: {weapon.FieldD0},
                fieldD4: {weapon.FieldD4},
                ricochetWeapon: new uint[] {{ 0x{weapon.RicochetWeaponPtr[0]:X1}, 0x{weapon.RicochetWeaponPtr[1]:X1} }},
                projectileCount: {weapon.ProjectileCount},
                minChargedProjectileCount: {weapon.MinChargedProjectileCount},
                chargeProjectileCount: {weapon.ChargeProjectileCount},
                smokeStart: {weapon.SmokeStart},
                smokeMinimum: {weapon.SmokeMinimum},
                smokeDrain: {weapon.SmokeDrain},
                smokeShotAmount: {weapon.SmokeShotAmount},
                smokeChargeAmount: {weapon.SmokeChargeAmount}
            ),");
        }

        public static void TestMatrix()
        {
            var field58 = new Vector3(0, 0, 1);
            var field64 = new Vector3(0, 1, 0);
            var field70 = new Vector3(-1, 0, 0);
            Matrix3 mat1 = TestVectors(field58, field64, field70);
            Nop();
            field58 = new Vector3(1, 0, 0);
            field64 = new Vector3(0, 1, 0);
            field70 = new Vector3(0, 0, 1);
            Matrix3 mat2 = TestVectors(field58, field64, field70);
            Quaternion quat1 = new Matrix4(mat1).ExtractRotation();
            Vector3 rot1 = quat1.ToEulerAngles();
            rot1 = new Vector3(MathHelper.RadiansToDegrees(rot1.X), MathHelper.RadiansToDegrees(rot1.Y), MathHelper.RadiansToDegrees(rot1.Z));
            Quaternion quat2 = new Matrix4(mat2).ExtractRotation();
            Vector3 rot2 = quat2.ToEulerAngles();
            rot2 = new Vector3(MathHelper.RadiansToDegrees(rot2.X), MathHelper.RadiansToDegrees(rot2.Y), MathHelper.RadiansToDegrees(rot2.Z));
            Nop();
        }

        public static Matrix3 TestVectors(Vector3 field58, Vector3 field64, Vector3 field70)
        {
            var field4F4 = new Matrix3(
                new Vector3(field58.X, 0, field58.Z),
                new Vector3(field64.X, field64.Y, field64.Z),
                new Vector3(field70.X, 0, field70.Y)
            );

            field4F4.Row2 = Vector3.Cross(field4F4.Row0, field4F4.Row1);
            field4F4.Row1 = Vector3.Cross(field4F4.Row2, field4F4.Row0);
            field4F4.Row0 = field4F4.Row0.Normalized();
            field4F4.Row1 = field4F4.Row1.Normalized();
            field4F4.Row2 = field4F4.Row2.Normalized();

            return field4F4;
        }

        public static Vector3 ParseVector3(string values)
        {
            string[] split = values.Split(' ');
            if (split.Length != 12 || split.Any(s => s.Length != 2))
            {
                throw new ArgumentException(nameof(values));
            }
            return new Vector3(
                Int32.Parse(split[3] + split[2] + split[1] + split[0], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(split[7] + split[6] + split[5] + split[4], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(split[11] + split[10] + split[9] + split[8], System.Globalization.NumberStyles.HexNumber) / 4096f
            );
        }

        public static Matrix4x3 ParseMatrix12(params string[] values)
        {
            if (values.Length != 12 || values.Any(v => v.Length != 8))
            {
                throw new ArgumentException(nameof(values));
            }
            return new Matrix4x3(
                Int32.Parse(values[0], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[1], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[2], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[3], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[4], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[5], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[6], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[7], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[8], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[9], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[10], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[11], System.Globalization.NumberStyles.HexNumber) / 4096f
            );
        }

        public static Matrix4 ParseMatrix16(params string[] values)
        {
            if (values.Length != 16 || values.Any(v => v.Length != 8))
            {
                throw new ArgumentException(nameof(values));
            }
            return new Matrix4(
                Int32.Parse(values[0], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[1], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[2], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[3], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[4], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[5], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[6], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[7], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[8], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[9], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[10], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[11], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[12], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[13], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[14], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[15], System.Globalization.NumberStyles.HexNumber) / 4096f
            );
        }

        public static Matrix4 ParseMatrix16(string value)
        {
            return ParseMatrix16(value.Split(' '));
        }

        public static Matrix4x3 ParseMatrix48(string value)
        {
            string[] values = value.Split(' ');
            if (values.Length != 48 || values.Any(v => v.Length != 2))
            {
                throw new ArgumentException(nameof(values));
            }
            return ParseMatrix12(
                values[3] + values[2] + values[1] + values[0],
                values[7] + values[6] + values[5] + values[4],
                values[11] + values[10] + values[9] + values[8],
                values[15] + values[14] + values[13] + values[12],
                values[19] + values[18] + values[17] + values[16],
                values[23] + values[22] + values[21] + values[20],
                values[27] + values[26] + values[25] + values[24],
                values[31] + values[30] + values[29] + values[28],
                values[35] + values[34] + values[33] + values[32],
                values[39] + values[38] + values[37] + values[36],
                values[43] + values[42] + values[41] + values[40],
                values[47] + values[46] + values[45] + values[44]
            );
        }

        public static Matrix4 ParseMatrix64(string value)
        {
            string[] values = value.Split(' ');
            if (values.Length != 64 || values.Any(v => v.Length != 2))
            {
                throw new ArgumentException(nameof(values));
            }
            return ParseMatrix16(
                values[3] + values[2] + values[1] + values[0],
                values[7] + values[6] + values[5] + values[4],
                values[11] + values[10] + values[9] + values[8],
                values[15] + values[14] + values[13] + values[12],
                values[19] + values[18] + values[17] + values[16],
                values[23] + values[22] + values[21] + values[20],
                values[27] + values[26] + values[25] + values[24],
                values[31] + values[30] + values[29] + values[28],
                values[35] + values[34] + values[33] + values[32],
                values[39] + values[38] + values[37] + values[36],
                values[43] + values[42] + values[41] + values[40],
                values[47] + values[46] + values[45] + values[44],
                values[51] + values[50] + values[49] + values[48],
                values[55] + values[54] + values[53] + values[52],
                values[59] + values[58] + values[57] + values[56],
                values[63] + values[62] + values[61] + values[60]
            );
        }

        public static void GetPolygonAttrs(Model model, int polygonId)
        {
            foreach (Material material in model.Materials)
            {
                GetPolygonAttrs(model, material, polygonId);
            }
        }

        public static void GetPolygonAttrs(Model model, Material material, int polygonId)
        {
            int v19 = polygonId == 1 ? 0x4000 : 0;
            int v20 = v19 | 0x8000;
            int attr = v20 | material.Lighting | 16 * (int)material.PolygonMode
                | ((int)material.Culling << 6) | (polygonId << 24) | (material.Alpha << 16);
            Console.WriteLine($"{model.Name} - {material.Name}");
            Console.WriteLine($"light = {material.Lighting}, mode = {(int)material.PolygonMode} ({material.PolygonMode}), " +
                $"cull = {(int)material.Culling} ({material.Culling}), alpha = {material.Alpha}, id = {polygonId}");
            DumpPolygonAttr((uint)attr);
        }

        public static void DumpPolygonAttr(uint attr)
        {
            Console.WriteLine($"0x{attr:X2}");
            string bits = Convert.ToString(attr, 2);
            Console.WriteLine(bits);
            Console.WriteLine($"light1: {attr & 0x1}");
            Console.WriteLine($"light2: {(attr >> 1) & 0x1}");
            Console.WriteLine($"light3: {(attr >> 2) & 0x1}");
            Console.WriteLine($"light4: {(attr >> 3) & 0x1}");
            Console.WriteLine($"mode: {(attr >> 4) & 0x2}");
            Console.WriteLine($"back: {(attr >> 6) & 0x1}");
            Console.WriteLine($"front: {(attr >> 7) & 0x1}");
            Console.WriteLine($"clear: {(attr >> 11) & 0x1}");
            Console.WriteLine($"far: {(attr >> 12) & 0x1}");
            Console.WriteLine($"1dot: {(attr >> 13) & 0x1}");
            Console.WriteLine($"depth: {(attr >> 14) & 0x1}");
            Console.WriteLine($"fog: {(attr >> 15) & 0x1}");
            Console.WriteLine($"alpha: {(attr >> 16) & 0x1F}");
            Console.WriteLine($"id: {(attr >> 24) & 0x3F}");
            Console.WriteLine();
        }

        public static Vector3 LightCalc(Vector3 light_vec, Vector3 light_col, Vector3 normal_vec,
            Vector3 dif_col, Vector3 amb_col, Vector3 spe_col)
        {
            var sight_vec = new Vector3(0.0f, 0.0f, -1.0f);
            float dif_factor = Math.Max(0.0f, -Vector3.Dot(light_vec, normal_vec));
            Vector3 half_vec = (light_vec + sight_vec) / 2.0f;
            float spe_factor = Math.Max(0.0f, Vector3.Dot(-half_vec, normal_vec));
            spe_factor *= spe_factor;
            Vector3 spe_out = spe_col * light_col * spe_factor;
            Vector3 dif_out = dif_col * light_col * dif_factor;
            Vector3 amb_out = amb_col * light_col;
            return spe_out + dif_out + amb_out;
        }

        public static void TestAllLayers()
        {
            foreach (KeyValuePair<string, RoomMetadata> meta in Metadata.RoomMetadata)
            {
                SceneSetup.LoadRoom(meta.Key);
            }
        }

        public static void TestAllNodes()
        {
            foreach (KeyValuePair<string, RoomMetadata> meta in Metadata.RoomMetadata)
            {
                Model room = Read.GetRoomModelInstance(meta.Key).Model;
                Console.WriteLine(meta.Key);
                for (int i = 0; i < room.Nodes.Count; i++)
                {
                    Node node = room.Nodes[i];
                }
                Console.WriteLine();
            }
            Nop();
        }

        public static void TestAllEntities()
        {
            foreach (KeyValuePair<string, RoomMetadata> meta in Metadata.RoomMetadata)
            {
                bool room = false;
                if (meta.Value.EntityPath != null)
                {
                    IReadOnlyList<Entity> entities = Read.GetEntities(meta.Value.EntityPath, -1, meta.Value.FirstHunt);
                    foreach (Entity entity in entities)
                    {
                        if (entity.Type == EntityType.Object)
                        {
                            ObjectEntityData data = ((Entity<ObjectEntityData>)entity).Data;
                            if ((data.EffectFlags & 8) != 0 && data.ModelId != 46)
                            {
                                Debugger.Break();
                            }
                        }
                        //if (entity.Type == EntityType.Platform)
                        //{
                        //    PlatformEntityData data = ((Entity<PlatformEntityData>)entity).Data;
                        //    if (data.BeamIndex != UInt32.MaxValue)
                        //    {
                        //        PlatformMetadata? type = Metadata.GetPlatformById((int)data.ModelId);
                        //        string name = type?.Name ?? "N/A";
                        //        if (data.BeamIndex > 0 && (data.Flags & 4) == 0)
                        //        {
                        //            Debugger.Break();
                        //        }
                        //        if (!room)
                        //        {
                        //            room = true;
                        //            Console.WriteLine(meta.Key);
                        //        }
                        //        Console.WriteLine($"[{data.BeamIndex}] {data.Header.EntityId:D2} ({name})");
                        //    }
                        //}
                    }
                }
                if (room)
                {
                    Console.WriteLine();
                }
            }
            Nop();
        }

        public static void TestEntityEffects()
        {
            var effects = new Dictionary<int, Effect>();
            for (int i = 0; i < Metadata.Effects.Count; i++)
            {
                (string name, string? archive) = Metadata.Effects[i];
                if (name != "" && name != "sparksFall" && name != "mortarSecondary"
                    && name != "powerBeamChargeNoSplatMP")
                {
                    effects.Add(i, Read.LoadEffect(name, archive));
                }
            }
            foreach (KeyValuePair<string, RoomMetadata> meta in Metadata.RoomMetadata)
            {
                bool printed = false;
                if (meta.Value.EntityPath != null)
                {
                    IReadOnlyList<Entity> entities = Read.GetEntities(meta.Value.EntityPath, -1, meta.Value.FirstHunt);
                    foreach (Entity entity in entities)
                    {
                        if (entity.Type == EntityType.Object)
                        {
                            ObjectEntityData data = ((Entity<ObjectEntityData>)entity).Data;
                            if (data.EffectId != 0)
                            {
                                if (!printed)
                                {
                                    Console.WriteLine("--------------------------------------------------------------------------------------");
                                    Console.WriteLine();
                                    Console.WriteLine($"{meta.Key} ({meta.Value.InGameName})");
                                    Console.WriteLine();
                                    printed = true;
                                }
                                Effect effect = effects[(int)data.EffectId];
                                Console.WriteLine($"[ ] Entity {entity.EntityId}, Effect {data.EffectId} ({effect.Name})");
                                var elems = new List<string>();
                                foreach (EffectElement element in effect.Elements)
                                {
                                    (int setVecsId, int drawId) = EffectFuncBase.GetFuncIds(element.Flags, element.DrawType);
                                    string vecs = setVecsId switch
                                    {
                                        1 => "B0",
                                        2 => "BC",
                                        3 => "C0",
                                        4 => "D4",
                                        5 => "D8",
                                        _ => "XX"
                                    };
                                    string draw = drawId switch
                                    {
                                        1 => "B4",
                                        2 => "B8",
                                        3 => "C4",
                                        4 => "C8",
                                        5 => "CC",
                                        6 => "D0",
                                        7 => "DC",
                                        _ => "XX"
                                    };
                                    elems.Add($"{element.Name} v:{vecs} d:{draw}");
                                }
                                Console.WriteLine(String.Join(", ", elems));
                                Console.Write("Spawns: ");
                                if ((data.EffectFlags & 0x40) != 0)
                                {
                                    Console.WriteLine("Always");
                                }
                                else if ((data.EffectFlags & 1) != 0)
                                {
                                    Console.WriteLine("Volume");
                                }
                                else
                                {
                                    Console.WriteLine("Anim ID");
                                }
                                Console.WriteLine($"Attach: {((data.EffectFlags & 0x10) != 0 ? "Yes" : "No")}");
                                Console.WriteLine($"Linked: {((data.LinkedEntity != UInt16.MaxValue) ? data.LinkedEntity.ToString() : "No")}");
                                Console.WriteLine();
                            }
                        }
                    }
                }
            }
            Nop();
        }

        public static void TestTriggerVolumes()
        {
            foreach (KeyValuePair<string, RoomMetadata> meta in Metadata.RoomMetadata)
            {
                if (meta.Value.EntityPath != null)
                {
                    IReadOnlyList<Entity> entities = Read.GetEntities(meta.Value.EntityPath, -1, meta.Value.FirstHunt);
                    foreach (Entity entity in entities)
                    {
                        if (entity.Type == EntityType.TriggerVolume)
                        {
                            TriggerVolumeEntityData data = ((Entity<TriggerVolumeEntityData>)entity).Data;
                        }
                    }
                }
            }
            Nop();
        }

        public static void TestAreaVolumes()
        {
            foreach (KeyValuePair<string, RoomMetadata> meta in Metadata.RoomMetadata)
            {
                if (meta.Value.EntityPath != null)
                {
                    IReadOnlyList<Entity> entities = Read.GetEntities(meta.Value.EntityPath, -1, meta.Value.FirstHunt);
                    foreach (Entity entity in entities)
                    {
                        if (entity.Type == EntityType.AreaVolume)
                        {
                            AreaVolumeEntityData data = ((Entity<AreaVolumeEntityData>)entity).Data;
                        }
                    }
                }
            }
            Nop();
        }

        public static void LightColor(uint arg)
        {
            uint r = arg & 0x1F;
            uint g = (arg >> 5) & 0x1F;
            uint b = (arg >> 10) & 0x1F;
            int light = (arg & 0x40000000) == 0 ? 0 : 1;
            Console.WriteLine($"light: {light} R {r}, G {g}, B {b}");
            //Console.WriteLine($"light: {light} R 0x{r:X2}, G 0x{g:X2}, B 0x{b:X2}");
            Console.WriteLine();
        }

        private static IEnumerable<Model> GetAllModels()
        {
            foreach (KeyValuePair<string, ModelMetadata> meta in Metadata.ModelMetadata)
            {
                yield return Read.GetModelInstance(meta.Key).Model;
            }
            foreach (KeyValuePair<string, ModelMetadata> meta in Metadata.FirstHuntModels)
            {
                yield return Read.GetModelInstance(meta.Key, firstHunt: true).Model;
            }
            foreach (KeyValuePair<string, RoomMetadata> meta in Metadata.RoomMetadata)
            {
                yield return Read.GetRoomModelInstance(meta.Key).Model;
            }
        }

        private static IEnumerable<Model> GetAllRooms()
        {
            foreach (KeyValuePair<string, RoomMetadata> meta in Metadata.RoomMetadata)
            {
                yield return Read.GetRoomModelInstance(meta.Key).Model;
            }
        }

        private static void Nop() { }

        private static IReadOnlyList<RawWeaponInfo> GetRicochets()
        {
            return ParseWeaponInfo(count: 4, new byte[]
            {
                // 0 - 0x20BDAB0 - Judicator
                0x05, 0x05, 0x03, 0x03, 0x94, 0x7E, 0x94, 0x7E, 0x02, 0x12, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x14, 0x14, 0x00, 0x0B, 0x0B, 0xFF, 0xFF, 0x03, 0x03, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00,
                0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00,
                0x33, 0x03, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x32, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
                // 1 - 0x20CA130
                0x06, 0x0A, 0x04, 0x04, 0x3F, 0x02, 0x3F, 0x02, 0x02, 0x01, 0x00, 0x40, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x02, 0x02, 0x14, 0x14, 0x00, 0x09, 0x09, 0xFF, 0xFF, 0x03, 0x03, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00,
                0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0xFF, 0xFF, 0xFF,
                0x34, 0xFF, 0xFF, 0xFF, 0x34, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
                0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00,
                0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
                0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x40, 0xA0, 0x0C, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x64, 0x00, 0x0A, 0x00,
                // 2 - 0x20CA220
                0x05, 0x0A, 0x03, 0x03, 0x94, 0x7E, 0x94, 0x7E, 0x02, 0x12, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x14, 0x14, 0x00, 0x0B, 0x0B, 0xFF, 0xFF, 0x03, 0x03, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00,
                0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
                0x00, 0x08, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
                0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x40, 0x01, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x03, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x32, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
                // 3 - 0x20CA040
                0x06, 0x0A, 0x04, 0x04, 0x3F, 0x02, 0x3F, 0x02, 0x02, 0x01, 0x00, 0x40, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x02, 0x02, 0x14, 0x14, 0x00, 0x09, 0x09, 0xFF, 0xFF, 0x03, 0x03, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00,
                0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0xFF, 0xFF, 0xFF,
                0x34, 0xFF, 0xFF, 0xFF, 0x34, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
                0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00,
                0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
                0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x64, 0x00, 0x0A, 0x00
            });
        }

        private static IReadOnlyList<RawWeaponInfo> Get1PWeapons()
        {
            return ParseWeaponInfo(count: 18, new byte[]
            {
                0x00, 0x00, 0x00, 0x00, 0x5F, 0x23, 0x9F, 0x53, 0x01, 0x07, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x04, 0x5F, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x12, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00,
                0x24, 0x00, 0x08, 0x00, 0x08, 0x00, 0x30, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x33, 0x03, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x4B, 0x00, 0x19, 0x00, 0x05, 0x00, 0x0A, 0x00, 0x4B, 0x00,
                0x01, 0x01, 0x01, 0x02, 0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x02, 0x04, 0x40, 0x00, 0x00, 0x38, 0x00,
                0x38, 0x00, 0x02, 0x02, 0x05, 0x05, 0x00, 0x59, 0xAE, 0x3C, 0x3C, 0x00, 0x00, 0x02, 0x02, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x0E, 0x00, 0x38, 0x00,
                0x38, 0x00, 0x15, 0x00, 0x38, 0x00, 0x38, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
                0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x09, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x02, 0x07, 0x07, 0x8C, 0x7D, 0x8C, 0x7D, 0x02, 0x02, 0x00, 0x40, 0x18, 0x00, 0x20, 0x00,
                0x20, 0x00, 0x03, 0x03, 0x14, 0x14, 0x01, 0x08, 0xC1, 0x41, 0x41, 0x02, 0x02, 0x02, 0x02, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x2D, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x20, 0x00, 0x30, 0x00,
                0x30, 0x00, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00,
                0x07, 0x00, 0x07, 0x00, 0x02, 0x00, 0x02, 0x00, 0x66, 0x06, 0x00, 0x00, 0x99, 0x09, 0x00, 0x00,
                0x99, 0x09, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x99, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
                0x00, 0x24, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x4B, 0x00, 0x19, 0x00, 0x05, 0x00, 0xFA, 0x00, 0x19, 0x00,
                0x03, 0x03, 0x0A, 0x0A, 0xEF, 0x3F, 0xEF, 0x3F, 0x02, 0x04, 0x00, 0x40, 0x08, 0x00, 0x08, 0x00,
                0x08, 0x00, 0x03, 0x03, 0x0A, 0x0A, 0x00, 0xB0, 0xB0, 0x3F, 0x3F, 0x02, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x0C, 0x00, 0x0C, 0x00,
                0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00,
                0x33, 0x03, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xFF, 0xFF, 0xFF,
                0x86, 0xFF, 0xFF, 0xFF, 0x86, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
                0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x04, 0x04, 0x08, 0x08, 0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x0C, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x3C, 0x3C, 0x00, 0x1F, 0x1F, 0x42, 0x42, 0x00, 0x00, 0x03, 0x03, 0x00,
                0x00, 0x00, 0x0A, 0x00, 0x5A, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x48, 0x00, 0x48, 0x00,
                0x48, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00,
                0x00, 0x80, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x05, 0x05, 0x03, 0x03, 0x94, 0x7E, 0x94, 0x7E, 0x02, 0x82, 0x00, 0x40, 0x0C, 0x00, 0x0A, 0x00,
                0x0A, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x0A, 0x0A, 0x3E, 0x3E, 0x03, 0x03, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x18, 0x00, 0x18, 0x00,
                0x18, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0xB0, 0xDA, 0x0B, 0x02, 0xB0, 0xDA, 0x0B, 0x02,
                0x01, 0x00, 0x03, 0x00, 0x03, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x06, 0x06, 0x04, 0x05, 0x5F, 0x3D, 0x5F, 0x3D, 0x02, 0x92, 0x02, 0x40, 0x10, 0x00, 0x1C, 0x00,
                0x1C, 0x00, 0x03, 0x03, 0x14, 0x0F, 0x00, 0x09, 0xC2, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x20, 0x00, 0x38, 0x00,
                0x38, 0x00, 0x20, 0x00, 0x38, 0x00, 0x38, 0x00, 0x2D, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00,
                0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x99, 0x05, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x86, 0xFF, 0xFF, 0xFF,
                0x86, 0xFF, 0xFF, 0xFF, 0x86, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x07, 0x00, 0x00,
                0x33, 0x07, 0x00, 0x00, 0x33, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x32, 0x00, 0x00, 0x00, 0x02, 0x00, 0xC8, 0x00, 0xF4, 0x01,
                0x07, 0x07, 0x09, 0x09, 0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x04, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x3E, 0x3E, 0x03, 0x03, 0x03, 0x03, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x2D, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x0A, 0x00, 0x0A, 0x00,
                0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xDB, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00,
                0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x08, 0x08, 0x0B, 0x0B, 0xFF, 0x7F, 0xFF, 0x7F, 0x05, 0x00, 0x00, 0x40, 0xC8, 0x00, 0xC8, 0x00,
                0xC8, 0x00, 0x03, 0x03, 0x3C, 0x3C, 0x00, 0xF8, 0xF8, 0x3C, 0x3C, 0x00, 0x00, 0x03, 0x03, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x2C, 0x01, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0xC8, 0x00, 0xC8, 0x00,
                0xC8, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00,
                0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x99, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
                0x33, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00,
                0x00, 0x90, 0x01, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x5F, 0x23, 0x9F, 0x53, 0x01, 0x07, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x04, 0x5F, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x12, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00,
                0x28, 0x00, 0x08, 0x00, 0x08, 0x00, 0x34, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x33, 0x03, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x51, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x4B, 0x00, 0x19, 0x00, 0x05, 0x00, 0x0A, 0x00, 0x4B, 0x00,
                0x01, 0x01, 0x01, 0x02, 0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x02, 0x04, 0x40, 0x00, 0x00, 0x38, 0x00,
                0x38, 0x00, 0x02, 0x02, 0x05, 0x05, 0x00, 0x59, 0x58, 0x3C, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x0E, 0x00, 0x38, 0x00,
                0x38, 0x00, 0x15, 0x00, 0x38, 0x00, 0x38, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
                0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
                0x28, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x61, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x02, 0x07, 0x07, 0x32, 0x7D, 0x32, 0x7D, 0x02, 0x02, 0x00, 0x40, 0x18, 0x00, 0x20, 0x00,
                0x20, 0x00, 0x03, 0x03, 0x14, 0x14, 0x01, 0x08, 0xC1, 0x41, 0x41, 0x02, 0x02, 0x02, 0x02, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x2D, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x20, 0x00, 0x30, 0x00,
                0x30, 0x00, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00,
                0x07, 0x00, 0x07, 0x00, 0x02, 0x00, 0x02, 0x00, 0x66, 0x06, 0x00, 0x00, 0x99, 0x09, 0x00, 0x00,
                0x99, 0x09, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x99, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
                0x51, 0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x61, 0x0F, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
                0x00, 0x24, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x4B, 0x00, 0x19, 0x00, 0x05, 0x00, 0xFA, 0x00, 0x19, 0x00,
                0x03, 0x03, 0x0A, 0x0A, 0xEF, 0x3F, 0xEF, 0x3F, 0x02, 0x04, 0x00, 0x40, 0x0C, 0x00, 0x0C, 0x00,
                0x0C, 0x00, 0x03, 0x03, 0x0F, 0x0F, 0x00, 0x0E, 0x0E, 0x3F, 0x3F, 0x02, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x12, 0x00, 0x12, 0x00,
                0x12, 0x00, 0x12, 0x00, 0x12, 0x00, 0x12, 0x00, 0x5A, 0x00, 0x5A, 0x00, 0x5A, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
                0x00, 0x08, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5D, 0xFF, 0xFF, 0xFF,
                0x5D, 0xFF, 0xFF, 0xFF, 0x5D, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x00, 0x00,
                0x04, 0x04, 0x08, 0x08, 0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x0C, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x3C, 0x3C, 0x00, 0x1F, 0x1F, 0x42, 0x42, 0x00, 0x00, 0x03, 0x03, 0x00,
                0x00, 0x00, 0x0A, 0x00, 0x5A, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x48, 0x00, 0x48, 0x00,
                0x48, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00,
                0x00, 0x80, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x05, 0x05, 0x03, 0x03, 0x94, 0x7E, 0x94, 0x7E, 0x02, 0x82, 0x10, 0x40, 0x0C, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x0A, 0x00, 0x3E, 0x3E, 0x03, 0x03, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x18, 0x00, 0x0C, 0x00,
                0x0C, 0x00, 0x20, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0xFF, 0x00, 0x05, 0x00, 0x05, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00,
                0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0xC0, 0x03, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0xB0, 0xDA, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x06, 0x06, 0x04, 0x05, 0x5F, 0x3D, 0x5F, 0x3D, 0x02, 0x92, 0x02, 0x40, 0x10, 0x00, 0x12, 0x00,
                0x12, 0x00, 0x03, 0x03, 0x14, 0x14, 0x00, 0x09, 0xC3, 0x40, 0x40, 0x02, 0x02, 0x00, 0x00, 0x00,
                0x04, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x20, 0x00, 0x30, 0x00,
                0x30, 0x00, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00, 0x2D, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00,
                0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x99, 0x05, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x86, 0xFF, 0xFF, 0xFF,
                0x86, 0xFF, 0xFF, 0xFF, 0x86, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x07, 0x00, 0x00,
                0x33, 0x07, 0x00, 0x00, 0x33, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x32, 0x00, 0x00, 0x00, 0x02, 0x00, 0xC8, 0x00, 0xF4, 0x01,
                0x07, 0x07, 0x09, 0x09, 0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x04, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x3E, 0x3E, 0x03, 0x03, 0x03, 0x03, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x2D, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x0A, 0x00, 0x0A, 0x00,
                0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xDB, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00,
                0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x08, 0x08, 0x0B, 0x0B, 0xFF, 0x7F, 0xFF, 0x7F, 0x05, 0x00, 0x00, 0x40, 0x3C, 0x00, 0x3C, 0x00,
                0x3C, 0x00, 0x03, 0x03, 0x3C, 0x3C, 0x00, 0xF8, 0xF8, 0x3C, 0x3C, 0x00, 0x00, 0x03, 0x03, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x3C, 0x00,
                0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x2D, 0x00,
                0x2D, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
                0xEB, 0x01, 0x00, 0x00, 0xEB, 0x01, 0x00, 0x00, 0xEB, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00,
                0x66, 0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
                0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00
            });
        }

        private static IReadOnlyList<RawWeaponInfo> GetMPWeapons()
        {
            return ParseWeaponInfo(count: 18, new byte[]
            {
                0x00, 0x00, 0x00, 0x00,
                0x5F, 0x23, 0x9F, 0x53, 0x01, 0x07, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x05, 0x05, 0x00, 0x04, 0x5F, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00,
                0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x24, 0x00, 0x08, 0x00,
                0x08, 0x00, 0x30, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00,
                0x00, 0x30, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x4B, 0x00, 0x19, 0x00, 0x05, 0x00, 0x0A, 0x00, 0x4B, 0x00, 0x01, 0x01, 0x01, 0x02,
                0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x02, 0x04, 0x40, 0x00, 0x00, 0x38, 0x00, 0x38, 0x00, 0x02, 0x02,
                0x05, 0x05, 0x00, 0x59, 0xAE, 0x3C, 0x3C, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x3C, 0x00, 0x05, 0x00, 0x19, 0x00, 0x19, 0x00, 0x0E, 0x00, 0x38, 0x00, 0x38, 0x00, 0x15, 0x00,
                0x38, 0x00, 0x38, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x07, 0x00, 0x07, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x00, 0x50, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x20, 0x03, 0x00, 0x09, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x07, 0x07,
                0x8C, 0x7D, 0x8C, 0x7D, 0x02, 0x02, 0x00, 0x40, 0x18, 0x00, 0x20, 0x00, 0x20, 0x00, 0x03, 0x03,
                0x14, 0x14, 0x01, 0x08, 0xC1, 0x41, 0x41, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x2D, 0x00, 0x0A, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00, 0x20, 0x00,
                0x30, 0x00, 0x30, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00, 0x07, 0x00, 0x07, 0x00,
                0x02, 0x00, 0x02, 0x00, 0x66, 0x06, 0x00, 0x00, 0x99, 0x09, 0x00, 0x00, 0x99, 0x09, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
                0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00,
                0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x4B, 0x00, 0x19, 0x00, 0x05, 0x00, 0xFA, 0x00, 0x19, 0x00, 0x03, 0x03, 0x0A, 0x0A,
                0xEF, 0x3F, 0xEF, 0x3F, 0x02, 0x04, 0x00, 0x40, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x03, 0x03,
                0x0A, 0x0A, 0x00, 0xB0, 0xB0, 0x3F, 0x3F, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x3C, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00,
                0x0C, 0x00, 0x0C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x33, 0x13, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xFF, 0xFF, 0xFF, 0x86, 0xFF, 0xFF, 0xFF,
                0x86, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
                0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08, 0x08,
                0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x0C, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x3C, 0x3C, 0x00, 0x1F, 0x1F, 0x42, 0x42, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x0A, 0x00,
                0x5A, 0x00, 0x14, 0x00, 0x14, 0x00, 0x14, 0x00, 0x48, 0x00, 0x48, 0x00, 0x48, 0x00, 0xC8, 0x00,
                0xC8, 0x00, 0xC8, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xC0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x20, 0x03, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x03, 0x03,
                0x94, 0x7E, 0x94, 0x7E, 0x02, 0x82, 0x00, 0x40, 0x0C, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x00, 0x00,
                0x0F, 0x0F, 0x00, 0x0A, 0x0A, 0x3E, 0x3E, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x3C, 0x00, 0x05, 0x00, 0x19, 0x00, 0x19, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x20, 0x00,
                0x20, 0x00, 0x20, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x90, 0x01, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0xB0, 0xDA, 0x0B, 0x02, 0xB0, 0xDA, 0x0B, 0x02, 0x01, 0x00, 0x03, 0x00,
                0x03, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x04, 0x05,
                0x5F, 0x3D, 0x5F, 0x3D, 0x02, 0x92, 0x02, 0x40, 0x10, 0x00, 0x1C, 0x00, 0x1C, 0x00, 0x03, 0x03,
                0x14, 0x0F, 0x00, 0x09, 0xC2, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x3C, 0x00, 0x0A, 0x00, 0x14, 0x00, 0x14, 0x00, 0x20, 0x00, 0x38, 0x00, 0x38, 0x00, 0x20, 0x00,
                0x38, 0x00, 0x38, 0x00, 0x2D, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00, 0x07, 0x00, 0x07, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x33, 0x1B, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x86, 0xFF, 0xFF, 0xFF, 0x86, 0xFF, 0xFF, 0xFF,
                0x86, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x07, 0x00, 0x00, 0x33, 0x07, 0x00, 0x00,
                0x33, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x32, 0x00, 0x00, 0x00, 0x02, 0x00, 0xC8, 0x00, 0xF4, 0x01, 0x07, 0x07, 0x09, 0x09,
                0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x04, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0xFF, 0xFF, 0x3E, 0x3E, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x2D, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00,
                0x0A, 0x00, 0x0A, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xC0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0xF0, 0x00, 0x00, 0xDB, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x0B, 0x0B,
                0xFF, 0x7F, 0xFF, 0x7F, 0x05, 0x00, 0x00, 0x40, 0xC8, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0x03, 0x03,
                0x3C, 0x3C, 0x00, 0xF8, 0xF8, 0x3C, 0x3C, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0xC8, 0x00,
                0xC8, 0x00, 0xC8, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00, 0x07, 0x00, 0x07, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00,
                0x33, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x20, 0x03, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x90, 0x01, 0x00,
                0x00, 0x90, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x5F, 0x23, 0x9F, 0x53, 0x01, 0x07, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x04, 0x04, 0x00, 0x04, 0x5F, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00,
                0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x28, 0x00, 0x08, 0x00,
                0x08, 0x00, 0x34, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00,
                0x00, 0x30, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00,
                0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x4B, 0x00, 0x19, 0x00, 0x05, 0x00, 0x0A, 0x00, 0x4B, 0x00, 0x01, 0x01, 0x01, 0x02,
                0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x02, 0x04, 0x40, 0x00, 0x00, 0x38, 0x00, 0x38, 0x00, 0x02, 0x02,
                0x05, 0x05, 0x00, 0x59, 0x58, 0x3C, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0F, 0x00,
                0x3C, 0x00, 0x05, 0x00, 0x19, 0x00, 0x19, 0x00, 0x0E, 0x00, 0x38, 0x00, 0x38, 0x00, 0x15, 0x00,
                0x38, 0x00, 0x38, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x07, 0x00, 0x07, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x00, 0x50, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
                0x00, 0x40, 0x06, 0x00, 0x61, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x07, 0x07,
                0x32, 0x7D, 0x32, 0x7D, 0x02, 0x02, 0x00, 0x40, 0x18, 0x00, 0x20, 0x00, 0x20, 0x00, 0x03, 0x03,
                0x14, 0x14, 0x01, 0x08, 0xC1, 0x41, 0x41, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x2D, 0x00, 0x0A, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00, 0x20, 0x00,
                0x30, 0x00, 0x30, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00, 0x07, 0x00, 0x07, 0x00,
                0x02, 0x00, 0x02, 0x00, 0x66, 0x06, 0x00, 0x00, 0x99, 0x09, 0x00, 0x00, 0x99, 0x09, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
                0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00,
                0x00, 0x20, 0x03, 0x00, 0x61, 0x0F, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00,
                0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x4B, 0x00, 0x19, 0x00, 0x05, 0x00, 0xFA, 0x00, 0x19, 0x00, 0x03, 0x03, 0x0A, 0x0A,
                0xEF, 0x3F, 0xEF, 0x3F, 0x02, 0x04, 0x00, 0x40, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x03, 0x03,
                0x0F, 0x0F, 0x00, 0x0E, 0x0E, 0x3F, 0x3F, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x3C, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x12, 0x00, 0x12, 0x00, 0x12, 0x00, 0x12, 0x00,
                0x12, 0x00, 0x12, 0x00, 0x5A, 0x00, 0x5A, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0x33, 0x13, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5D, 0xFF, 0xFF, 0xFF, 0x5D, 0xFF, 0xFF, 0xFF,
                0x5D, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x64, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08, 0x08,
                0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x0C, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x3C, 0x3C, 0x00, 0x1F, 0x1F, 0x42, 0x42, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x0A, 0x00,
                0x5A, 0x00, 0x14, 0x00, 0x14, 0x00, 0x14, 0x00, 0x48, 0x00, 0x48, 0x00, 0x48, 0x00, 0xC8, 0x00,
                0xC8, 0x00, 0xC8, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xC0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x20, 0x03, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x03, 0x03,
                0x94, 0x7E, 0x94, 0x7E, 0x02, 0x82, 0x10, 0x40, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x0F, 0x0F, 0x00, 0x0A, 0x00, 0x3E, 0x3E, 0x03, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0F, 0x00,
                0x3C, 0x00, 0x05, 0x00, 0x19, 0x00, 0x19, 0x00, 0x18, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x20, 0x00,
                0x0C, 0x00, 0x0C, 0x00, 0xFF, 0x00, 0x05, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0x20, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x90, 0x01, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0xB0, 0xDA, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x04, 0x05,
                0x5F, 0x3D, 0x5F, 0x3D, 0x02, 0x92, 0x02, 0x40, 0x10, 0x00, 0x12, 0x00, 0x12, 0x00, 0x03, 0x03,
                0x14, 0x14, 0x00, 0x09, 0xC3, 0x40, 0x40, 0x02, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0F, 0x00,
                0x3C, 0x00, 0x0A, 0x00, 0x14, 0x00, 0x14, 0x00, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00, 0x20, 0x00,
                0x30, 0x00, 0x30, 0x00, 0x2D, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00, 0x07, 0x00, 0x07, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x33, 0x1B, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x86, 0xFF, 0xFF, 0xFF, 0x86, 0xFF, 0xFF, 0xFF,
                0x86, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x07, 0x00, 0x00, 0x33, 0x07, 0x00, 0x00,
                0x33, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x32, 0x00, 0x00, 0x00, 0x02, 0x00, 0xC8, 0x00, 0xF4, 0x01, 0x07, 0x07, 0x09, 0x09,
                0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x04, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0xFF, 0xFF, 0x3E, 0x3E, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x2D, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00,
                0x0A, 0x00, 0x0A, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xC0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0xF0, 0x00, 0x00, 0xDB, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x0B, 0x0B,
                0xFF, 0x7F, 0xFF, 0x7F, 0x05, 0x00, 0x00, 0x40, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x03, 0x03,
                0x3C, 0x3C, 0x00, 0xF8, 0xF8, 0x3C, 0x3C, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00,
                0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x2D, 0x00, 0x2D, 0x00, 0x2D, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0xEB, 0x01, 0x00, 0x00,
                0xEB, 0x01, 0x00, 0x00, 0xEB, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00,
                0x00, 0x20, 0x03, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
                0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00
            });
        }

        private static IReadOnlyList<RawWeaponInfo> GetEnemyWeapons()
        {
            return ParseWeaponInfo(count: 11, new byte[]
            {
                0x00, 0x0A, 0x15, 0x15, 0x5F, 0x23, 0x9F, 0x53, 0x01, 0x07, 0x06, 0x40, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0xF2, 0xF2, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x1E, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0C, 0x00,
                0x24, 0x00, 0x08, 0x00, 0x0C, 0x00, 0x24, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x66, 0x0A, 0x00, 0x00, 0x66, 0x0A, 0x00, 0x00, 0x66, 0x0A, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x0A, 0x02, 0x02, 0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x02, 0xC6, 0x40, 0x14, 0x00, 0x20, 0x00,
                0x20, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x59, 0x58, 0x3C, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x02, 0x00, 0x0F, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x20, 0x00,
                0x20, 0x00, 0x1E, 0x00, 0x20, 0x00, 0x20, 0x00, 0x5A, 0x00, 0x5A, 0x00, 0x5A, 0x00, 0x07, 0x00,
                0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0xCC, 0x0C, 0x00, 0x00, 0xCC, 0x0C, 0x00, 0x00, 0xCC, 0x0C, 0x00, 0x00,
                0x7A, 0x04, 0x00, 0x00, 0x7A, 0x04, 0x00, 0x00, 0x7A, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
                0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x0A, 0x07, 0x07, 0x8C, 0x7D, 0x8C, 0x7D, 0x02, 0x03, 0x06, 0x40, 0x1E, 0x00, 0x1E, 0x00,
                0x1E, 0x00, 0x02, 0x02, 0x14, 0x14, 0x01, 0x08, 0x08, 0x41, 0x41, 0x02, 0x02, 0x02, 0x02, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x1E, 0x00,
                0x1E, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00,
                0x07, 0x00, 0x07, 0x00, 0x02, 0x00, 0x02, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
                0xCC, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
                0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x4B, 0x00, 0x19, 0x00, 0x05, 0x00, 0x7D, 0x00, 0x19, 0x00,
                0x03, 0x0A, 0x00, 0x00, 0xEF, 0x3F, 0xEF, 0x3F, 0x02, 0x04, 0x06, 0x40, 0x02, 0x00, 0x02, 0x00,
                0x02, 0x00, 0x03, 0x03, 0x08, 0x08, 0x00, 0xB0, 0xB0, 0x3F, 0x3F, 0x03, 0x03, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00,
                0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x00, 0x00,
                0x04, 0x0A, 0x08, 0x08, 0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x0C, 0x06, 0x40, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x3C, 0x3C, 0x00, 0x1F, 0x1F, 0x42, 0x42, 0x03, 0x03, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x0A, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 0x63, 0x00,
                0x63, 0x00, 0xC7, 0x00, 0xC7, 0x00, 0xC7, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
                0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00, 0xE0, 0x01, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x05, 0x0A, 0x03, 0x06, 0x94, 0x7E, 0x94, 0x7E, 0x02, 0x02, 0x16, 0x40, 0x1B, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x0A, 0x00, 0x3E, 0x3E, 0x03, 0x03, 0x00, 0x00, 0x01,
                0x01, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x14, 0x00,
                0x14, 0x00, 0x24, 0x00, 0x14, 0x00, 0x14, 0x00, 0x28, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
                0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00,
                0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0xC0, 0x03, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x20, 0xA2, 0x0C, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x32, 0x00, 0x00, 0x00, 0x05, 0x00, 0x19, 0x00, 0x32, 0x00,
                0x06, 0x0A, 0x16, 0x16, 0x5F, 0x3D, 0x5F, 0x3D, 0x02, 0x82, 0x06, 0x40, 0x1D, 0x00, 0x3A, 0x00,
                0x3A, 0x00, 0x02, 0x02, 0x14, 0x14, 0x00, 0x09, 0x09, 0x40, 0x40, 0x02, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x3A, 0x00,
                0x3A, 0x00, 0x1D, 0x00, 0x3A, 0x00, 0x3A, 0x00, 0x1E, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x0F, 0x00,
                0x0F, 0x00, 0x0F, 0x00, 0x02, 0x00, 0x02, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x34, 0xFF, 0xFF, 0xFF, 0x34, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
                0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xA1, 0x0C, 0x02,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x32, 0x00, 0x00, 0x00, 0x02, 0x00, 0xC8, 0x00, 0xF4, 0x01,
                0x07, 0x0A, 0x09, 0x09, 0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x84, 0x26, 0x40, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x3E, 0x3E, 0x03, 0x03, 0x03, 0x03, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x19, 0x00,
                0x19, 0x00, 0x19, 0x00, 0x19, 0x00, 0x19, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x50, 0x0B, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
                0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x32, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x00, 0x0A, 0x0E, 0x0E, 0x5F, 0x23, 0x9F, 0x53, 0x01, 0x07, 0x06, 0x40, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x04, 0x04, 0x41, 0x41, 0x03, 0x03, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x1E, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0C, 0x00,
                0x24, 0x00, 0x08, 0x00, 0x0C, 0x00, 0x24, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x99, 0x09, 0x00, 0x00, 0x99, 0x09, 0x00, 0x00, 0x99, 0x09, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x06, 0x0A, 0x0F, 0x0F, 0x5F, 0x23, 0x9F, 0x53, 0x01, 0x07, 0xC6, 0x40, 0x0F, 0x00, 0x0F, 0x00,
                0x0F, 0x00, 0x03, 0x03, 0x03, 0x03, 0x00, 0x71, 0x71, 0x41, 0x41, 0x03, 0x03, 0x00, 0x00, 0x04,
                0x00, 0x00, 0x1E, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0C, 0x00,
                0x24, 0x00, 0x08, 0x00, 0x0C, 0x00, 0x24, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0xCC, 0x08, 0x00, 0x00, 0xCC, 0x08, 0x00, 0x00, 0xCC, 0x08, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
                0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x0A, 0x10, 0x10, 0x5F, 0x23, 0x9F, 0x53, 0x01, 0x07, 0xC6, 0x40, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x86, 0x86, 0x41, 0x41, 0x03, 0x03, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x1E, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0C, 0x00,
                0x24, 0x00, 0x08, 0x00, 0x0C, 0x00, 0x24, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
                0x00, 0x08, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0xCC, 0x08, 0x00, 0x00, 0xCC, 0x08, 0x00, 0x00, 0xCC, 0x08, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00
            });
        }

        private static IReadOnlyList<RawWeaponInfo> GetPlatformWeapons()
        {
            return ParseWeaponInfo(count: 4, new byte[]
            {
                0x02, 0x09, 0x14, 0x14,
                0x8C, 0x7D, 0x8C, 0x7D, 0x02, 0x03, 0x06, 0x40, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x02,
                0x14, 0x14, 0x01, 0xBB, 0xBB, 0xBC, 0xBC, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00,
                0x03, 0x00, 0x03, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00, 0x07, 0x00, 0x07, 0x00,
                0x02, 0x00, 0x02, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x33, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0xCC, 0x00, 0x00, 0x00,
                0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
                0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x4B, 0x00, 0x19, 0x00, 0x05, 0x00, 0x7D, 0x00, 0x19, 0x00, 0x00, 0x09, 0x00, 0x00,
                0x5F, 0x23, 0x5F, 0x23, 0x01, 0x05, 0x06, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x03, 0x03, 0x00, 0xFF, 0xFF, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x08, 0x00,
                0x08, 0x00, 0x08, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x90, 0x01, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x09, 0x11, 0x11,
                0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x84, 0x26, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0xFF, 0xFF, 0x3D, 0x3D, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x2D, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00,
                0x3C, 0x00, 0x3C, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0x90, 0x03, 0x00, 0x00, 0x90, 0x03, 0x00, 0x00, 0x90, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x80, 0x00, 0x00, 0x50, 0x0B, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
                0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x32, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x07, 0x09, 0x09, 0x09,
                0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0xFF, 0xFF, 0x3E, 0x3E, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x14, 0x00, 0x14, 0x00, 0x14, 0x00,
                0x14, 0x00, 0x14, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xF0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0x60, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            });
        }

        public readonly struct RawWeaponInfo
        {
            public readonly BeamType Weapon;
            public readonly BeamType WeaponType; // same as Weapon except for platform/enemy beams
            [MarshalAs(UnmanagedType.ByValArray, ArraySubType = UnmanagedType.U1, SizeConst = 2)]
            public readonly byte[] DrawFuncIds;
            [MarshalAs(UnmanagedType.ByValArray, ArraySubType = UnmanagedType.U2, SizeConst = 2)]
            public readonly ushort[] Colors;
            public readonly WeaponFlags Flags;
            public readonly ushort SplashDamage;
            public readonly ushort MinChargeSplashDamage;
            public readonly ushort ChargedSplashDamage;
            [MarshalAs(UnmanagedType.ByValArray, ArraySubType = UnmanagedType.U1, SizeConst = 2)]
            public readonly byte[] SplashDmgTypes;
            public readonly byte ShotCooldown;
            public readonly byte ShotCooldownRelated;
            public readonly byte AmmoType;
            [MarshalAs(UnmanagedType.ByValArray, ArraySubType = UnmanagedType.U1, SizeConst = 2)]
            public readonly byte[] BeamTypes; // correspond to collision effects
            [MarshalAs(UnmanagedType.ByValArray, ArraySubType = UnmanagedType.U1, SizeConst = 2)]
            public readonly byte[] MuzzleEffects;
            [MarshalAs(UnmanagedType.ByValArray, ArraySubType = UnmanagedType.U1, SizeConst = 2)]
            public readonly byte[] DmgDirTypes;
            [MarshalAs(UnmanagedType.ByValArray, ArraySubType = UnmanagedType.U1, SizeConst = 2)]
            public readonly byte[] Field1D;
            [MarshalAs(UnmanagedType.ByValArray, ArraySubType = UnmanagedType.U1, SizeConst = 2)]
            public readonly Affliction[] Afflictions; // bit 0 - freeze, bit 1 - disrupt, bit 3 - burn
            public readonly byte Field21;
            public readonly ushort MinCharge;
            public readonly ushort FullCharge;
            public readonly ushort AmmoCost;
            public readonly ushort MinChargeCost;
            public readonly ushort ChargeCost;
            public readonly ushort UnchargedDamage;
            public readonly ushort MinChargeDamage;
            public readonly ushort ChargedDamage;
            public readonly ushort HeadshotDamage;
            public readonly ushort MinChargeHeadshotDamage;
            public readonly ushort ChargedHeadshotDamage;
            public readonly ushort UnchargedLifespan;
            public readonly ushort MinChargeLifespan;
            public readonly ushort ChargedLifespan;
            [MarshalAs(UnmanagedType.ByValArray, ArraySubType = UnmanagedType.U2, SizeConst = 2)]
            public readonly ushort[] SpeedDecay;
            public readonly ushort Field42;
            [MarshalAs(UnmanagedType.ByValArray, ArraySubType = UnmanagedType.U2, SizeConst = 2)]
            public readonly ushort[] SpeedInterp;
            public readonly int Field48; // uncharged
            public readonly int Field4C; // min charge
            public readonly int Field50; // full charge
            public readonly int Field54;
            public readonly int Field58; // uncharged
            public readonly int Field5C; // min charge
            public readonly int Field60; // full charge
            public readonly int UnchargedSpeed; // uncharged
            public readonly int MinChargeSpeed; // min charge
            public readonly int ChargedSpeed; // full charge
            public readonly int UnchargedFinalSpeed; // uncharged
            public readonly int MinChargeFinalSpeed; // min charge
            public readonly int ChargedFinalSpeed; // full charge
            public readonly int UnchargedGravity;
            public readonly int MinChargeGravity;
            public readonly int ChargedGravity;
            public readonly int UnchargedHoming;
            public readonly int MinChargeHoming;
            public readonly int ChargedHoming;
            public readonly int HomingRange;
            public readonly int HomingTolerance;
            public readonly int UnchargedScale;
            public readonly int MinChargeScale;
            public readonly int ChargedScale;
            public readonly int UnchargedDistance;
            public readonly int MinChargeDistance;
            public readonly int ChargedDistance;
            public readonly int UnchargedSpread; // uncharged
            public readonly int MinChargeSpread; // min charge
            public readonly int ChargedSpread; // full charge
            public readonly int FieldC0; // uncharged
            public readonly int FieldC4; // min charge
            public readonly int FieldC8; // full charge
            public readonly int FieldCC; // uncharged
            public readonly int FieldD0; // min charge
            public readonly int FieldD4; // full charge
            [MarshalAs(UnmanagedType.ByValArray, ArraySubType = UnmanagedType.U4, SizeConst = 2)]
            public readonly uint[] RicochetWeaponPtr; // WeaponInfo*
            public readonly ushort ProjectileCount;
            public readonly ushort MinChargedProjectileCount;
            public readonly ushort ChargeProjectileCount;
            public readonly ushort SmokeStart; // start drawing gun smoke when smoke level reaches this value (and cap it)
            public readonly ushort SmokeMinimum; // continue drawing gun smoke until level drops below this value
            public readonly ushort SmokeDrain; // reduce level by this amount each frame (or bring it to 0)
            public readonly ushort SmokeShotAmount; // increase level by this amount when firing uncharged shot
            public readonly ushort SmokeChargeAmount; // increase level by this amount each frame while charging
        }
    }
}
