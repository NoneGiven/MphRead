using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using OpenToolkit.Mathematics;

namespace MphRead
{
    public static class Test
    {
        public static void TestCameraSequences()
        {
            // todo: metadata for this
            foreach (string filePath in Directory.EnumerateFiles(Path.Combine(Paths.FileSystem, "cameraEditor")))
            {
                string name = Path.GetFileNameWithoutExtension(filePath);
                if (name != "cameraEditBG")
                {
                    IReadOnlyList<CameraSequenceFrame> frames = Read.ReadCameraSequence(name);
                    Nop();
                }
            }
        }

        public static void TestEffects()
        {
            foreach (string path in Metadata.Effects)
            {
                if (path != "" && path != "effects/sparksFall_PS.bin" && path != "effects/mortarSecondary_PS.bin"
                    && path != "effects/powerBeamChargeNoSplatMP_PS.bin")
                {
                    Effect effect = Read.ReadEffect(path);
                    foreach (EffectElement element in effect.Elements)
                    {
                        Nop();
                    }
                }
            }
            Nop();
        }

        public static void TestCollision()
        {
            ushort headerSize = 0;
            var sizes = new List<(int, ushort, string)>();
            string modelPath = Paths.FileSystem;
            foreach (string path in Directory.EnumerateFiles(modelPath, "", SearchOption.AllDirectories))
            {
                if (path.ToLower().Contains("_collision.bin"))
                {
                    var bytes = new ReadOnlySpan<byte>(File.ReadAllBytes(path));
                    ushort eight = BitConverter.ToUInt16(bytes[0x04..0x06]);
                    sizes.Add((bytes.Length - headerSize, eight, path.Replace(Paths.FileSystem + "\\", "")));
                }
            }
            foreach ((int size, int eight, string name) in sizes.OrderBy(s => s.Item1))
            {
                Console.WriteLine($"{size,6} {eight,4} - {name.Replace("_archive", "archive")}");
            }
            Nop();
        }

        public static bool TestBytes(string one, string two)
        {
            byte[] bone = File.ReadAllBytes(one);
            byte[] btwo = File.ReadAllBytes(two);
            return Enumerable.SequenceEqual(bone, btwo);
        }

        private static void WriteAllModels()
        {
            string modelPath = Path.Combine(Paths.FileSystem, "models");
            var modelFiles = new List<string>();
            var textureFiles = new List<string>();
            var animationFiles = new List<string>();
            var collisionFiles = new List<string>();
            var unknownFiles = new List<string>();
            foreach (string path in Directory.EnumerateFiles(modelPath, "", SearchOption.AllDirectories))
            {
                string pathLower = path.ToLower();
                if (pathLower.Contains("_model.bin"))
                {
                    modelFiles.Add(path);
                }
                else if (pathLower.Contains("_tex.bin"))
                {
                    textureFiles.Add(path);
                }
                else if (pathLower.Contains("_anim.bin"))
                {
                    animationFiles.Add(path);
                }
                else if (pathLower.Contains("_collision.bin"))
                {
                    collisionFiles.Add(path);
                }
                else
                {
                    unknownFiles.Add(path);
                }
            }
            var lines = new List<string>();
            lines.Add($"model ({modelFiles.Count}):");
            lines.AddRange(modelFiles.OrderBy(m => m));
            lines.Add("");
            lines.Add($"texture ({textureFiles.Count}):");
            lines.AddRange(textureFiles.OrderBy(m => m));
            lines.Add("");
            lines.Add($"animation ({animationFiles.Count}):");
            lines.AddRange(animationFiles.OrderBy(m => m));
            lines.Add("");
            lines.Add($"collision ({collisionFiles.Count}):");
            lines.AddRange(collisionFiles.OrderBy(m => m));
            lines.Add("");
            lines.Add($"unknown ({unknownFiles.Count}):");
            lines.AddRange(unknownFiles.OrderBy(m => m));
            File.WriteAllLines("models.txt", lines);
            lines.Clear();

            void AddMatch(string model, string suffix, List<string> list)
            {
                model = model.ToLower().Replace("_lod0", "").Replace("lod1", "");
                string match1 = model.Replace("_model.bin", $"_{suffix}.bin");
                string match2 = match1.Replace("_mdl", "");
                int index = list.IndexOf(f => f.ToLower() == match1 || f.ToLower() == match2);
                if (index != -1)
                {
                    lines!.Add(list[index]);
                    list.RemoveAt(index);
                }
            }

            foreach (string file in modelFiles)
            {
                lines.Add(file);
                AddMatch(file, "tex", textureFiles);
                AddMatch(file, "anim", animationFiles);
                AddMatch(file, "collision", collisionFiles);
                lines.Add("");
            }
            lines.Add("unmatched texture:");
            foreach (string file in textureFiles)
            {
                lines.Add(file);
            }
            lines.Add("");
            lines.Add("unmatched animation:");
            foreach (string file in animationFiles)
            {
                lines.Add(file);
            }
            lines.Add("");
            lines.Add("unmatched collision:");
            foreach (string file in collisionFiles)
            {
                lines.Add(file);
            }
            File.WriteAllLines("matches.txt", lines);
        }

        public static void ParseAllModels()
        {
            GetAllModels();
        }

        public static void TestAllModels()
        {
            foreach (Model model in GetAllModels())
            {
                if (model.Header.TextureMatrixCount > 1)
                {
                    Console.WriteLine($"{model.Header.TextureMatrixCount} - {model.Name}");
                }
            }
        }

        public static void TestMatrices()
        {
            // 0x020DB528 (passed to draw_animated_model from CModel_draw from draw_player)
            // updated in sub_201DCE4 -- I guess it's just the model transform?
            Matrix4x3 mtx1 = ParseMatrix48("03 F0 FF FF 00 00 00 00 9C 00 00 00 F9 FF FF FF FB 0F 00 00 3E FF FF FF 64 FF FF FF 3E FF FF FF 08 F0 FF FF 22 00 00 00 86 40 00 00 F1 AD FD FF");
            // 0x220DA430 (constant?)
            Matrix4x3 mtx2 = ParseMatrix48("FD 0F 00 00 D3 FF FF FF 97 00 00 00 00 00 00 00 53 0F 00 00 9B 04 00 00 62 FF FF FF 66 FB FF FF 50 0F 00 00 F4 E8 FF FF DA 0B FF FF BF F8 01 00");
            // concatenation result
            Matrix4x3 currentTextureMatrix = ParseMatrix48("FF EF FF FF 00 00 00 00 FE FF FF FF 00 00 00 00 86 0F 00 00 DF 03 00 00 01 00 00 00 DF 03 00 00 7A F0 FF FF 00 00 00 00 7F F4 FF FF CA D2 FF FF");
            Matrix4x3 mult = Matrix.Concat43(mtx1, mtx2);

            var trans = new Matrix4(
                new Vector4(mtx1.Row0, 0.0f),
                new Vector4(mtx1.Row1, 0.0f),
                new Vector4(mtx1.Row2, 0.0f),
                new Vector4(mtx1.Row3, 1.0f)
            );
            Vector3 pos = trans.ExtractTranslation();
            Vector3 rot = trans.ExtractRotation().ToEulerAngles();
            rot = new Vector3(
                MathHelper.RadiansToDegrees(rot.X),
                MathHelper.RadiansToDegrees(rot.Y),
                MathHelper.RadiansToDegrees(rot.Z)
            );
            Vector3 scale = trans.ExtractScale();
        }

        public enum Hunter : byte
        {
            Samus = 0,
            Kanden = 1,
            Trace = 2,
            Sylux = 3,
            Noxus = 4,
            Spire = 5,
            Weavel = 6,
            Guardian = 7
        }

        // 4F4 update for alt forms in sub_201DCE4
        public static void TestLogic1()
        {
            Hunter hunter = 0;
            int flags = 0;
            int v45 = 0;

            if (hunter == Hunter.Noxus)
            {

            }
            else if (hunter > Hunter.Samus && hunter != Hunter.Spire)
            {
                if (hunter == Hunter.Kanden)
                {
                    /* call sub_202657C */
                }
                else // Trace, Sylux, Weavel, Guardian
                {

                }
            }
            else // Samus, Spire
            {
                // the "404 + 64" used in the vector setup seems to point to fx32 0.5
                // might be a modifier for movement speed, or terrain angle?
                if (hunter > Hunter.Samus || (flags & 0x80) > 0) // Spire OR colliding with platform
                {
                    /* v45 vector setup 1 */
                    // (?) calculate vector based on speed
                    v45 = 1;
                }
                else // Samus AND !(colliding with platform)
                {
                    /* v45 vector setup 2 */
                    // calculate vector based on current and previous position
                    v45 = 2;
                }
                if (v45 > 0)
                {
                    /* matrix setup */
                    if (hunter == Hunter.Samus)
                    {
                        /* 4F4 matrix concat */
                    }
                    /* 4F4 cross product and normalize */
                    if (hunter == Hunter.Spire)
                    {
                        /* 4F4 matrix multiplication */
                    }
                }
            }
        }

        [Flags]
        public enum SomeFlags : uint
        {
            None = 0x0,
            SurfaceCollision = 0x10,
            PlatformCollision = 0x80,
            UsedJump = 0x100,
            AltForm = 0x200,
            DrawAltForm = 0x400,
            BlockAiming = 0x1000000,
            WeaponMenu = 0x2000000,
            DrawGunSmoke = 0x80000000
        }

        [Flags]
        public enum MoreFlags : uint
        {
            None = 0x0,
            FullCharge = 0x1,
            HideModel = 0x2,
            WeaponFiring = 0x4,
            AltFormAttack = 0x8
        }

        public class CPlayer
        {
            public Vector3 Position { get; set; }
            public Hunter Hunter { get; set; }
            public SomeFlags SomeFlags { get; set; }
            public MoreFlags MoreFlags { get; set; }
            public CModel Model { get; set; } = null!;
            public CModel Gun { get; set; } = null!;
            public CModel GunSmoke { get; set; } = null!;
            public Matrix4x3 SomeMatrix { get; set; }
            public byte Field4BB { get; set; }
            public CModel Field1A4 { get; set; } = null!;
            public uint Health { get; set; }
            public int Field358 { get; set; }
            public int Field6D0 { get; set; }
            public Vector3 Field64 { get; set; }
            public Vector3 FieldB4 { get; set; }
            public short FieldE2 { get; set; }
            public byte Field4D6 { get; set; }
            public int Field550 { get; set; }
            public int Field46C { get; set; }
        }

        public class CModel
        {
            public MModel Model { get; set; } = null!;
            public short SomeFlag { get; set; }
            public CNodeAnimation NodeAnimation { get; set; } = null!;
        }

        public class CNodeAnimation
        {
            public UIntPtr NodeAnimation { get; set; }
        }

        public class MModel
        {
            public UIntPtr NodeAnimation { get; set; }
            public byte Flags { get; set; }
            public float Scale { get; set; }
        }

        // (?) determine if other Hunters are visible based on partial room?
        private static bool IsVisibleMaybe(CPlayer player)
        {
            return player != null;
        }

        private static readonly MModel _mdl200D960 = null!;

        private static readonly MModel _mdl200D938 = null!;

        private static readonly MModel _mdl200E490 = null!;

        private static readonly Matrix4x3 _mtx20D955C = Matrix4x3.Zero;

        private static readonly Matrix4x3 _viewMatrix = Matrix4x3.Zero;

        private static Matrix4x3 _currentTextureMatrix = Matrix4x3.Zero;

        private static readonly int _mem20E97B0 = 0;

        private static readonly int _mem20DA5D0 = 0;

        private static int _mem20E3EA0 = 0;

        private static readonly int _gameState = 2;

        // ???
        private static void Memory1FF8000()
        {
        }

        private static void CModelDraw(CModel model, Matrix4x3 someMatrix)
        {
            DrawAnimatedModel(model.Model, someMatrix, (byte)model.SomeFlag);
        }

        private static void DrawAnimatedModel(MModel model, Matrix4x3 texMatrix, byte flags)
        {
            Matrix4x3 currentTextureMatrix;
            if ((model.Flags & 1) > 0) // if any materials have lighting enabled
            {
                if (model.Scale == 1)
                {
                    currentTextureMatrix = Matrix.Concat43(texMatrix, _viewMatrix);
                }
                else
                {
                    var scaleMatrix = Matrix4x3.CreateScale(model.Scale);
                    currentTextureMatrix = Matrix.Concat43(scaleMatrix, texMatrix);
                    currentTextureMatrix = Matrix.Concat43(currentTextureMatrix, _viewMatrix);
                }
            }
            else
            {
                if (model.Scale == 1)
                {
                    currentTextureMatrix = texMatrix;
                }
                else
                {
                    var scaleMatrix = Matrix4x3.CreateScale(model.Scale);
                    currentTextureMatrix = Matrix.Concat43(scaleMatrix, texMatrix);
                }
            }
            _currentTextureMatrix = currentTextureMatrix;
            _mem20E3EA0 = 0;
            if (model.NodeAnimation != UIntPtr.Zero)
            {
                if ((flags & 1) > 0) // ???
                {
                    Memory1FF8000();
                }
                else
                {
                    Memory1FF8000();
                    _mem20E3EA0 = -2147483648;
                }
            }
            // later, in normal texgen:
            if (_mem20E3EA0 >= 0)
            {
                // node_transform * current_texture_matrix
            }
            else
            {
                // node_transform only
            }
        }

        private static void CModelInitializeAnimationData(CModel model)
        {
            CNodeAnimationSetData(model.Model, model.NodeAnimation.NodeAnimation);
        }

        private static void CNodeAnimationSetData(MModel model, UIntPtr nodeAnimation)
        {
            model.NodeAnimation = nodeAnimation;
        }

        // model draw calls in draw_player
        public static void TestLogic2(CPlayer player, int playerId)
        {
            if (!player.MoreFlags.HasFlag(MoreFlags.HideModel))
            {
                if (player.Hunter == Hunter.Spire && player.MoreFlags.HasFlag(MoreFlags.AltFormAttack))
                {
                    CModelInitializeAnimationData(player.Model);
                }
                if (playerId == 0 || IsVisibleMaybe(player))
                {
                    // one of these must be checking if the player is P1 but the camera is third person
                    bool v10 = (
                        playerId != 0
                        || player.Field4D6 != 0
                        // (unsigned __int8)tmp_player->field_550 < (signed int)*(unsigned __int16 *)(tmp_player->field_404 + 104)
                        || player.Field550 < player.Field46C
                        || _mem20DA5D0 != 0
                    );
                    if (player.SomeFlags.HasFlag(SomeFlags.AltForm))
                    {
                        if (player.Hunter == Hunter.Kanden)
                        {
                            CNodeAnimationSetData(player.Model.Model, UIntPtr.Zero);
                            CModelDraw(player.Model, _mtx20D955C);
                            CNodeAnimationSetData(player.Model.Model, player.Model.NodeAnimation.NodeAnimation);
                        }
                        else if (player.Hunter == Hunter.Spire)
                        {
                            if (player.MoreFlags.HasFlag(MoreFlags.AltFormAttack))
                            {
                                CModelInitializeAnimationData(player.Model);
                                CNodeAnimationSetData(player.Model.Model, UIntPtr.Zero);
                                var matrix = Matrix4x3.CreateTranslation(player.Position);
                                DrawAnimatedModel(_mdl200D960, matrix, (byte)player.Model.SomeFlag);
                            }
                            else
                            {
                                CModelDraw(player.Model, player.SomeMatrix);
                            }
                        }
                        else
                        {
                            CModelDraw(player.Model, player.SomeMatrix);
                        }
                        if (player.Field4BB != 0)
                        {
                            // v52 = sub_20AC718(tmp_player->field_108.data.sphere.radius);
                            // v54 = sub_20AC190(dword_200D970, dword_200D974, v52, v53);
                            // v55 = sub_20AC5AC(v54);
                            int v55 = 1;
                            var scaleMatrix = Matrix4x3.CreateScale(v55);
                            Matrix4x3 matrix = Matrix.Concat43(scaleMatrix, player.SomeMatrix);
                            CModelDraw(player.Field1A4, matrix);
                        }
                    }
                    else if (v10)
                    {
                        if (player.Health > 0)
                        {
                            // v171 (???)
                            Matrix4x3 matrix = Matrix4x3.Zero;
                            DrawAnimatedModel(_mdl200D938, matrix, flags: 0);
                            if (player.Field4BB != 0)
                            {
                                CModelDraw(player.Field1A4, matrix);
                            }
                        }
                    }
                    else
                    {
                        if (player.Field358 != 0 || player.Field6D0 != 0)
                        {

                        }
                        else
                        {
                            Matrix3 transform = SceneSetup.GetTransformMatrix(player.Field64, player.FieldB4);
                            var matrix = new Matrix4x3(transform.Row0, transform.Row1, transform.Row2, new Vector3());
                            CModelDraw(player.Gun, matrix);
                            if (player.SomeFlags.HasFlag(SomeFlags.DrawGunSmoke))
                            {
                                CModelDraw(player.GunSmoke, matrix);
                            }
                        }
                    }
                }
                // if ( *((_BYTE *)off_200E484 + 36) )
                // if ( LOBYTE(tmp_player->field_E2) )
                // if ( LOBYTE(tmp_player->field_E2) <= 0x77 )
                if (_gameState == 2 && playerId == 0 && _mem20E97B0 != 0 && player.FieldE2 <= 0x77)
                {
                    //v155 = off_200D924;
                    //v156 = off_200E48C[0][1];
                    //v157 = off_200E48C[0][2];
                    //off_200D924->m[9] = *off_200E48C[0];
                    //v155->m[10] = v156;
                    //v155->m[11] = v157;
                    Matrix4x3 matrix = Matrix4x3.Zero;
                    DrawAnimatedModel(_mdl200E490, matrix, flags: 0);
                }
            }
        }

        private static readonly List<string> _weaponNames = new List<string>()
        {
            "Power Beam", "Volt Driver", "Missiles", "Battlehammer", "Imperialist", "Judicator", "Magmaul", "Shock Coil", "Omega Cannon"
        };

        //[StructLayout(LayoutKind.Sequential, Pack = 1)]
        public struct WeaponInfo
        {
            public byte Id;
            public byte Field1; // same as Id
            public ushort Field2;
            public ushort Field4;
            public ushort Field6;
            public byte Priority;
            public byte Field9;
            public byte FieldA;
            public byte FieldB;
            public ushort SplashDamage;
            public ushort FieldE;
            public ushort Field10;
            public ushort Field12;
            public byte Field14;
            public byte Field15;
            public byte AmmoType;
            public byte Field17;
            public byte Field18;
            public byte Field19;
            public byte Field1A;
            public byte Field1B;
            public ushort Field1C;
            public ushort Field1E;
            public ushort Field20;
            public ushort FullCharge;
            public ushort Field24;
            public ushort AmmoCost;
            public ushort ChargeCost;
            public ushort Field2A; // same as ChargeCost
            public ushort UnchargedDamage;
            public ushort Field2E; // some damage value?
            public ushort ChargedDamage;
            public ushort HeadshotDamage;
            public ushort Field34; // some headshot damage value?
            public ushort ChargedHeadshotDamage;
            public ushort Field38;
            public ushort Field3A;
            public ushort Field3C;
            public ushort Field3E;
            public ushort Field40;
            public ushort Field42;
            public ushort Field44;
            public ushort Field46;
            public ushort Field48;
            public ushort Field4A;
            public ushort Field4C;
            public ushort Field4E;
            public ushort Field50;
            public ushort Field52;
            public ushort Field54;
            public ushort Field56;
            public ushort Field58;
            public ushort Field5A;
            public ushort Field5C;
            public ushort Field5E;
            public ushort Field60;
            public ushort Field62;
            public ushort Field64;
            public ushort Field66;
            public ushort Field68;
            public ushort Field6A;
            public ushort Field6C;
            public ushort Field6E;
            public ushort Field70;
            public ushort Field72;
            public ushort Field74;
            public ushort Field76;
            public ushort Field78;
            public ushort Field7A;
            public ushort Field7C;
            public ushort Field7E;
            public ushort Field80;
            public ushort Field82;
            public ushort Field84;
            public ushort Field86;
            public ushort Field88;
            public ushort Field8A;
            public ushort Field8C;
            public ushort Field8E;
            public ushort Field90;
            public ushort Field92;
            public ushort Field94; // ?
            public ushort Field96;
            public ushort Field98;
            public ushort Field9A;
            public ushort Field9C;
            public ushort Field9E;
            public ushort FieldA0;
            public ushort FieldA2;
            public ushort FieldA4;
            public ushort FieldA6;
            public ushort FieldA8;
            public ushort FieldAA;
            public ushort FieldAC;
            public ushort FieldAE;
            public ushort FieldB0;
            public ushort FieldB2;
            public ushort FieldB4;
            public ushort FieldB6;
            public ushort FieldB8;
            public ushort FieldBA;
            public ushort FieldBC;
            public ushort FieldBE;
            public ushort FieldC0;
            public ushort FieldC2;
            public ushort FieldC4;
            public ushort FieldC6;
            public ushort FieldC8;
            public ushort FieldCA;
            public ushort FieldCC;
            public ushort FieldCE;
            public ushort FieldD0;
            public ushort FieldD2;
            public ushort FieldD4;
            public ushort FieldD6;
            public ushort FieldD8;
            public ushort FieldDA;
            public ushort FieldDC;
            public ushort FieldDE;
            public ushort FieldE0;
            public ushort FieldE2;
            public ushort FieldE4;
            public ushort FieldE6;
            public ushort FieldE8;
            public ushort FieldEA;
            public ushort FieldEC;
            public ushort FieldEE;

            public string Name => _weaponNames[Id];
        }

        public static void TestWeaponInfo()
        {
            IReadOnlyList<WeaponInfo> weapons1P = Get1PWeapons();
            IReadOnlyList<WeaponInfo> weaponsMP = GetMPWeapons();
            Nop();
        }

        private static IReadOnlyList<WeaponInfo> ParseWeaponInfo(byte[] array)
        {
            int count = 18;
            int size = Marshal.SizeOf<WeaponInfo>();
            var results = new List<WeaponInfo>();
            var bytes = new ReadOnlySpan<byte>(array);
            Debug.Assert(bytes.Length == count * size);
            for (int i = 0; i < count; i++)
            {
                int start = i * size;
                int end = start + size;
                results.Add(MemoryMarshal.Read<WeaponInfo>(bytes[start..end]));
            }
            return results;
        }

        public static void TestMatrix()
        {
            var field58 = new Vector3(0, 0, 1);
            var field64 = new Vector3(0, 1, 0);
            var field70 = new Vector3(-1, 0, 0);
            Matrix3 mat1 = TestVectors(field58, field64, field70);
            Nop();
            field58 = new Vector3(1, 0, 0);
            field64 = new Vector3(0, 1, 0);
            field70 = new Vector3(0, 0, 1);
            Matrix3 mat2 = TestVectors(field58, field64, field70);
            Quaternion quat1 = new Matrix4(mat1).ExtractRotation();
            Vector3 rot1 = quat1.ToEulerAngles();
            rot1 = new Vector3(MathHelper.RadiansToDegrees(rot1.X), MathHelper.RadiansToDegrees(rot1.Y), MathHelper.RadiansToDegrees(rot1.Z));
            Quaternion quat2 = new Matrix4(mat2).ExtractRotation();
            Vector3 rot2 = quat2.ToEulerAngles();
            rot2 = new Vector3(MathHelper.RadiansToDegrees(rot2.X), MathHelper.RadiansToDegrees(rot2.Y), MathHelper.RadiansToDegrees(rot2.Z));
            Nop();
        }

        public static Matrix3 TestVectors(Vector3 field58, Vector3 field64, Vector3 field70)
        {
            var field4F4 = new Matrix3(
                new Vector3(field58.X, 0, field58.Z),
                new Vector3(field64.X, field64.Y, field64.Z),
                new Vector3(field70.X, 0, field70.Y)
            );

            field4F4.Row2 = Vector3.Cross(field4F4.Row0, field4F4.Row1);
            field4F4.Row1 = Vector3.Cross(field4F4.Row2, field4F4.Row0);
            field4F4.Row0 = field4F4.Row0.Normalized();
            field4F4.Row1 = field4F4.Row1.Normalized();
            field4F4.Row2 = field4F4.Row2.Normalized();

            return field4F4;
        }

        public static Matrix4x3 ParseMatrix12(params string[] values)
        {
            if (values.Length != 12 || values.Any(v => v.Length != 8))
            {
                throw new ArgumentException(nameof(values));
            }
            return new Matrix4x3(
                Int32.Parse(values[0], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[1], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[2], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[3], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[4], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[5], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[6], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[7], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[8], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[9], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[10], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[11], System.Globalization.NumberStyles.HexNumber) / 4096f
            );
        }

        public static Matrix4 ParseMatrix16(params string[] values)
        {
            if (values.Length != 16 || values.Any(v => v.Length != 8))
            {
                throw new ArgumentException(nameof(values));
            }
            return new Matrix4(
                Int32.Parse(values[0], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[1], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[2], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[3], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[4], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[5], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[6], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[7], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[8], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[9], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[10], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[11], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[12], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[13], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[14], System.Globalization.NumberStyles.HexNumber) / 4096f,
                Int32.Parse(values[15], System.Globalization.NumberStyles.HexNumber) / 4096f
            );
        }

        public static Matrix4 ParseMatrix16(string value)
        {
            return ParseMatrix16(value.Split(' '));
        }

        public static Matrix4x3 ParseMatrix48(string value)
        {
            string[] values = value.Split(' ');
            if (values.Length != 48 || values.Any(v => v.Length != 2))
            {
                throw new ArgumentException(nameof(values));
            }
            return ParseMatrix12(
                values[3] + values[2] + values[1] + values[0],
                values[7] + values[6] + values[5] + values[4],
                values[11] + values[10] + values[9] + values[8],
                values[15] + values[14] + values[13] + values[12],
                values[19] + values[18] + values[17] + values[16],
                values[23] + values[22] + values[21] + values[20],
                values[27] + values[26] + values[25] + values[24],
                values[31] + values[30] + values[29] + values[28],
                values[35] + values[34] + values[33] + values[32],
                values[39] + values[38] + values[37] + values[36],
                values[43] + values[42] + values[41] + values[40],
                values[47] + values[46] + values[45] + values[44]
            );
        }

        public static Matrix4 ParseMatrix64(string value)
        {
            string[] values = value.Split(' ');
            if (values.Length != 64 || values.Any(v => v.Length != 2))
            {
                throw new ArgumentException(nameof(values));
            }
            return ParseMatrix16(
                values[3] + values[2] + values[1] + values[0],
                values[7] + values[6] + values[5] + values[4],
                values[11] + values[10] + values[9] + values[8],
                values[15] + values[14] + values[13] + values[12],
                values[19] + values[18] + values[17] + values[16],
                values[23] + values[22] + values[21] + values[20],
                values[27] + values[26] + values[25] + values[24],
                values[31] + values[30] + values[29] + values[28],
                values[35] + values[34] + values[33] + values[32],
                values[39] + values[38] + values[37] + values[36],
                values[43] + values[42] + values[41] + values[40],
                values[47] + values[46] + values[45] + values[44],
                values[51] + values[50] + values[49] + values[48],
                values[55] + values[54] + values[53] + values[52],
                values[59] + values[58] + values[57] + values[56],
                values[63] + values[62] + values[61] + values[60]
            );
        }

        public static void GetPolygonAttrs(Model model, int polygonId)
        {
            foreach (Material material in model.Materials)
            {
                GetPolygonAttrs(model, material, polygonId);
            }
        }

        public static void GetPolygonAttrs(Model model, Material material, int polygonId)
        {
            int v19 = polygonId == 1 ? 0x4000 : 0;
            int v20 = v19 | 0x8000;
            int attr = v20 | material.Lighting | 16 * (int)material.PolygonMode
                | ((int)material.Culling << 6) | (polygonId << 24) | (material.Alpha << 16);
            Console.WriteLine($"{model.Name} - {material.Name}");
            Console.WriteLine($"light = {material.Lighting}, mode = {(int)material.PolygonMode} ({material.PolygonMode}), " +
                $"cull = {(int)material.Culling} ({material.Culling}), alpha = {material.Alpha}, id = {polygonId}");
            DumpPolygonAttr((uint)attr);
        }

        public static void DumpPolygonAttr(uint attr)
        {
            Console.WriteLine($"0x{attr:X2}");
            string bits = Convert.ToString(attr, 2);
            Console.WriteLine(bits);
            Console.WriteLine($"light1: {attr & 0x1}");
            Console.WriteLine($"light2: {(attr >> 1) & 0x1}");
            Console.WriteLine($"light3: {(attr >> 2) & 0x1}");
            Console.WriteLine($"light4: {(attr >> 3) & 0x1}");
            Console.WriteLine($"mode: {(attr >> 4) & 0x2}");
            Console.WriteLine($"back: {(attr >> 6) & 0x1}");
            Console.WriteLine($"front: {(attr >> 7) & 0x1}");
            Console.WriteLine($"clear: {(attr >> 11) & 0x1}");
            Console.WriteLine($"far: {(attr >> 12) & 0x1}");
            Console.WriteLine($"1dot: {(attr >> 13) & 0x1}");
            Console.WriteLine($"depth: {(attr >> 14) & 0x1}");
            Console.WriteLine($"fog: {(attr >> 15) & 0x1}");
            Console.WriteLine($"alpha: {(attr >> 16) & 0x1F}");
            Console.WriteLine($"id: {(attr >> 24) & 0x3F}");
            Console.WriteLine();
        }

        public static Vector3 LightCalc(Vector3 light_vec, Vector3 light_col, Vector3 normal_vec,
            Vector3 dif_col, Vector3 amb_col, Vector3 spe_col)
        {
            var sight_vec = new Vector3(0.0f, 0.0f, -1.0f);
            float dif_factor = Math.Max(0.0f, -Vector3.Dot(light_vec, normal_vec));
            Vector3 half_vec = (light_vec + sight_vec) / 2.0f;
            float spe_factor = Math.Max(0.0f, Vector3.Dot(-half_vec, normal_vec));
            spe_factor *= spe_factor;
            Vector3 spe_out = spe_col * light_col * spe_factor;
            Vector3 dif_out = dif_col * light_col * dif_factor;
            Vector3 amb_out = amb_col * light_col;
            return spe_out + dif_out + amb_out;
        }

        public static void TestAllLayers()
        {
            foreach (KeyValuePair<string, RoomMetadata> meta in Metadata.RoomMetadata)
            {
                SceneSetup.LoadRoom(meta.Key);
            }
        }

        public static void TestAllNodes()
        {
            foreach (KeyValuePair<string, RoomMetadata> meta in Metadata.RoomMetadata)
            {
                Model room = Read.GetRoomByName(meta.Key);
                Console.WriteLine(meta.Key);
                for (int i = 0; i < room.Nodes.Count; i++)
                {
                    Node node = room.Nodes[i];
                }
                Console.WriteLine();
            }
            Nop();
        }

        public static void TestAllEntities()
        {
            foreach (KeyValuePair<string, RoomMetadata> meta in Metadata.RoomMetadata)
            {
                if (meta.Value.EntityPath != null)
                {
                    IReadOnlyList<Entity> entities = Read.GetEntities(meta.Value.EntityPath, -1);
                    foreach (Entity entity in entities)
                    {
                        if (entity.Type == EntityType.Platform)
                        {
                            PlatformEntityData data = ((Entity<PlatformEntityData>)entity).Data;
                        }
                    }
                }
            }
            Nop();
        }

        public static void TestTriggerVolumes()
        {
            foreach (KeyValuePair<string, RoomMetadata> meta in Metadata.RoomMetadata)
            {
                if (meta.Value.EntityPath != null)
                {
                    IReadOnlyList<Entity> entities = Read.GetEntities(meta.Value.EntityPath, -1);
                    foreach (Entity entity in entities)
                    {
                        if (entity.Type == EntityType.TriggerVolume)
                        {
                            TriggerVolumeEntityData data = ((Entity<TriggerVolumeEntityData>)entity).Data;
                        }
                    }
                }
            }
            Nop();
        }

        public static void TestAreaVolumes()
        {
            foreach (KeyValuePair<string, RoomMetadata> meta in Metadata.RoomMetadata)
            {
                if (meta.Value.EntityPath != null)
                {
                    IReadOnlyList<Entity> entities = Read.GetEntities(meta.Value.EntityPath, -1);
                    foreach (Entity entity in entities)
                    {
                        if (entity.Type == EntityType.AreaVolume)
                        {
                            AreaVolumeEntityData data = ((Entity<AreaVolumeEntityData>)entity).Data;
                        }
                    }
                }
            }
            Nop();
        }

        public static void LightColor(uint arg)
        {
            uint r = arg & 0x1F;
            uint g = (arg >> 5) & 0x1F;
            uint b = (arg >> 10) & 0x1F;
            int light = (arg & 0x40000000) == 0 ? 0 : 1;
            Console.WriteLine($"light: {light} R {r}, G {g}, B {b}");
            //Console.WriteLine($"light: {light} R 0x{r:X2}, G 0x{g:X2}, B 0x{b:X2}");
            Console.WriteLine();
        }

        private static IEnumerable<Model> GetAllModels()
        {
            foreach (KeyValuePair<string, ModelMetadata> meta in Metadata.ModelMetadata)
            {
                yield return Read.GetModelByName(meta.Key);
            }
            foreach (KeyValuePair<string, ModelMetadata> meta in Metadata.FirstHuntModels)
            {
                yield return Read.GetModelByName(meta.Key, firstHunt: true);
            }
            foreach (KeyValuePair<string, RoomMetadata> meta in Metadata.RoomMetadata)
            {
                yield return Read.GetRoomByName(meta.Key);
            }
        }

        private static IEnumerable<Model> GetAllRooms()
        {
            foreach (KeyValuePair<string, RoomMetadata> meta in Metadata.RoomMetadata)
            {
                yield return Read.GetRoomByName(meta.Key);
            }
        }

        private static void Nop() { }

        private static IReadOnlyList<WeaponInfo> Get1PWeapons()
        {
            return ParseWeaponInfo(new byte[]
            {
                0x00, 0x00, 0x00, 0x00, 0x5F, 0x23, 0x9F, 0x53, 0x01, 0x07, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x04, 0x5F, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x12, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00,
                0x24, 0x00, 0x08, 0x00, 0x08, 0x00, 0x30, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x33, 0x03, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x4B, 0x00, 0x19, 0x00, 0x05, 0x00, 0x0A, 0x00, 0x4B, 0x00,
                0x01, 0x01, 0x01, 0x02, 0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x02, 0x04, 0x40, 0x00, 0x00, 0x38, 0x00,
                0x38, 0x00, 0x02, 0x02, 0x05, 0x05, 0x00, 0x59, 0xAE, 0x3C, 0x3C, 0x00, 0x00, 0x02, 0x02, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x0E, 0x00, 0x38, 0x00,
                0x38, 0x00, 0x15, 0x00, 0x38, 0x00, 0x38, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
                0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x09, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x02, 0x07, 0x07, 0x8C, 0x7D, 0x8C, 0x7D, 0x02, 0x02, 0x00, 0x40, 0x18, 0x00, 0x20, 0x00,
                0x20, 0x00, 0x03, 0x03, 0x14, 0x14, 0x01, 0x08, 0xC1, 0x41, 0x41, 0x02, 0x02, 0x02, 0x02, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x2D, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x20, 0x00, 0x30, 0x00,
                0x30, 0x00, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00,
                0x07, 0x00, 0x07, 0x00, 0x02, 0x00, 0x02, 0x00, 0x66, 0x06, 0x00, 0x00, 0x99, 0x09, 0x00, 0x00,
                0x99, 0x09, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x99, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
                0x00, 0x24, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x4B, 0x00, 0x19, 0x00, 0x05, 0x00, 0xFA, 0x00, 0x19, 0x00,
                0x03, 0x03, 0x0A, 0x0A, 0xEF, 0x3F, 0xEF, 0x3F, 0x02, 0x04, 0x00, 0x40, 0x08, 0x00, 0x08, 0x00,
                0x08, 0x00, 0x03, 0x03, 0x0A, 0x0A, 0x00, 0xB0, 0xB0, 0x3F, 0x3F, 0x02, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x0C, 0x00, 0x0C, 0x00,
                0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00,
                0x33, 0x03, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xFF, 0xFF, 0xFF,
                0x86, 0xFF, 0xFF, 0xFF, 0x86, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
                0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x04, 0x04, 0x08, 0x08, 0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x0C, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x3C, 0x3C, 0x00, 0x1F, 0x1F, 0x42, 0x42, 0x00, 0x00, 0x03, 0x03, 0x00,
                0x00, 0x00, 0x0A, 0x00, 0x5A, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x48, 0x00, 0x48, 0x00,
                0x48, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00,
                0x00, 0x80, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x05, 0x05, 0x03, 0x03, 0x94, 0x7E, 0x94, 0x7E, 0x02, 0x82, 0x00, 0x40, 0x0C, 0x00, 0x0A, 0x00,
                0x0A, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x0A, 0x0A, 0x3E, 0x3E, 0x03, 0x03, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x18, 0x00, 0x18, 0x00,
                0x18, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0xB0, 0xDA, 0x0B, 0x02, 0xB0, 0xDA, 0x0B, 0x02,
                0x01, 0x00, 0x03, 0x00, 0x03, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x06, 0x06, 0x04, 0x05, 0x5F, 0x3D, 0x5F, 0x3D, 0x02, 0x92, 0x02, 0x40, 0x10, 0x00, 0x1C, 0x00,
                0x1C, 0x00, 0x03, 0x03, 0x14, 0x0F, 0x00, 0x09, 0xC2, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x20, 0x00, 0x38, 0x00,
                0x38, 0x00, 0x20, 0x00, 0x38, 0x00, 0x38, 0x00, 0x2D, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00,
                0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x99, 0x05, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x86, 0xFF, 0xFF, 0xFF,
                0x86, 0xFF, 0xFF, 0xFF, 0x86, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x07, 0x00, 0x00,
                0x33, 0x07, 0x00, 0x00, 0x33, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x32, 0x00, 0x00, 0x00, 0x02, 0x00, 0xC8, 0x00, 0xF4, 0x01,
                0x07, 0x07, 0x09, 0x09, 0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x04, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x3E, 0x3E, 0x03, 0x03, 0x03, 0x03, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x2D, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x0A, 0x00, 0x0A, 0x00,
                0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xDB, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00,
                0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x08, 0x08, 0x0B, 0x0B, 0xFF, 0x7F, 0xFF, 0x7F, 0x05, 0x00, 0x00, 0x40, 0xC8, 0x00, 0xC8, 0x00,
                0xC8, 0x00, 0x03, 0x03, 0x3C, 0x3C, 0x00, 0xF8, 0xF8, 0x3C, 0x3C, 0x00, 0x00, 0x03, 0x03, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x2C, 0x01, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0xC8, 0x00, 0xC8, 0x00,
                0xC8, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00,
                0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x99, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
                0x33, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00,
                0x00, 0x90, 0x01, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x5F, 0x23, 0x9F, 0x53, 0x01, 0x07, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x04, 0x5F, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x12, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00,
                0x28, 0x00, 0x08, 0x00, 0x08, 0x00, 0x34, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x33, 0x03, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x51, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x4B, 0x00, 0x19, 0x00, 0x05, 0x00, 0x0A, 0x00, 0x4B, 0x00,
                0x01, 0x01, 0x01, 0x02, 0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x02, 0x04, 0x40, 0x00, 0x00, 0x38, 0x00,
                0x38, 0x00, 0x02, 0x02, 0x05, 0x05, 0x00, 0x59, 0x58, 0x3C, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x0E, 0x00, 0x38, 0x00,
                0x38, 0x00, 0x15, 0x00, 0x38, 0x00, 0x38, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
                0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
                0x28, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x61, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x02, 0x07, 0x07, 0x32, 0x7D, 0x32, 0x7D, 0x02, 0x02, 0x00, 0x40, 0x18, 0x00, 0x20, 0x00,
                0x20, 0x00, 0x03, 0x03, 0x14, 0x14, 0x01, 0x08, 0xC1, 0x41, 0x41, 0x02, 0x02, 0x02, 0x02, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x2D, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x20, 0x00, 0x30, 0x00,
                0x30, 0x00, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00,
                0x07, 0x00, 0x07, 0x00, 0x02, 0x00, 0x02, 0x00, 0x66, 0x06, 0x00, 0x00, 0x99, 0x09, 0x00, 0x00,
                0x99, 0x09, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x99, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
                0x51, 0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x61, 0x0F, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
                0x00, 0x24, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x4B, 0x00, 0x19, 0x00, 0x05, 0x00, 0xFA, 0x00, 0x19, 0x00,
                0x03, 0x03, 0x0A, 0x0A, 0xEF, 0x3F, 0xEF, 0x3F, 0x02, 0x04, 0x00, 0x40, 0x0C, 0x00, 0x0C, 0x00,
                0x0C, 0x00, 0x03, 0x03, 0x0F, 0x0F, 0x00, 0x0E, 0x0E, 0x3F, 0x3F, 0x02, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x12, 0x00, 0x12, 0x00,
                0x12, 0x00, 0x12, 0x00, 0x12, 0x00, 0x12, 0x00, 0x5A, 0x00, 0x5A, 0x00, 0x5A, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
                0x00, 0x08, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5D, 0xFF, 0xFF, 0xFF,
                0x5D, 0xFF, 0xFF, 0xFF, 0x5D, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x00, 0x00,
                0x04, 0x04, 0x08, 0x08, 0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x0C, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x3C, 0x3C, 0x00, 0x1F, 0x1F, 0x42, 0x42, 0x00, 0x00, 0x03, 0x03, 0x00,
                0x00, 0x00, 0x0A, 0x00, 0x5A, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x48, 0x00, 0x48, 0x00,
                0x48, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00,
                0x00, 0x80, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x05, 0x05, 0x03, 0x03, 0x94, 0x7E, 0x94, 0x7E, 0x02, 0x82, 0x10, 0x40, 0x0C, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x0A, 0x00, 0x3E, 0x3E, 0x03, 0x03, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x18, 0x00, 0x0C, 0x00,
                0x0C, 0x00, 0x20, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0xFF, 0x00, 0x05, 0x00, 0x05, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00,
                0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0xC0, 0x03, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0xB0, 0xDA, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x06, 0x06, 0x04, 0x05, 0x5F, 0x3D, 0x5F, 0x3D, 0x02, 0x92, 0x02, 0x40, 0x10, 0x00, 0x12, 0x00,
                0x12, 0x00, 0x03, 0x03, 0x14, 0x14, 0x00, 0x09, 0xC3, 0x40, 0x40, 0x02, 0x02, 0x00, 0x00, 0x00,
                0x04, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x20, 0x00, 0x30, 0x00,
                0x30, 0x00, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00, 0x2D, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00,
                0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x99, 0x05, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x86, 0xFF, 0xFF, 0xFF,
                0x86, 0xFF, 0xFF, 0xFF, 0x86, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x07, 0x00, 0x00,
                0x33, 0x07, 0x00, 0x00, 0x33, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x32, 0x00, 0x00, 0x00, 0x02, 0x00, 0xC8, 0x00, 0xF4, 0x01,
                0x07, 0x07, 0x09, 0x09, 0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x04, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x3E, 0x3E, 0x03, 0x03, 0x03, 0x03, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x2D, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x0A, 0x00, 0x0A, 0x00,
                0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xDB, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00,
                0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x08, 0x08, 0x0B, 0x0B, 0xFF, 0x7F, 0xFF, 0x7F, 0x05, 0x00, 0x00, 0x40, 0x3C, 0x00, 0x3C, 0x00,
                0x3C, 0x00, 0x03, 0x03, 0x3C, 0x3C, 0x00, 0xF8, 0xF8, 0x3C, 0x3C, 0x00, 0x00, 0x03, 0x03, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x3C, 0x00,
                0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x2D, 0x00,
                0x2D, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x99, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
                0xEB, 0x01, 0x00, 0x00, 0xEB, 0x01, 0x00, 0x00, 0xEB, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00,
                0x66, 0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
                0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00
            });
        }

        private static IReadOnlyList<WeaponInfo> GetMPWeapons()
        {
            return ParseWeaponInfo(new byte[]
            {
                0x00, 0x00, 0x00, 0x00,
                0x5F, 0x23, 0x9F, 0x53, 0x01, 0x07, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x05, 0x05, 0x00, 0x04, 0x5F, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00,
                0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x24, 0x00, 0x08, 0x00,
                0x08, 0x00, 0x30, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00,
                0x00, 0x30, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x4B, 0x00, 0x19, 0x00, 0x05, 0x00, 0x0A, 0x00, 0x4B, 0x00, 0x01, 0x01, 0x01, 0x02,
                0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x02, 0x04, 0x40, 0x00, 0x00, 0x38, 0x00, 0x38, 0x00, 0x02, 0x02,
                0x05, 0x05, 0x00, 0x59, 0xAE, 0x3C, 0x3C, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x3C, 0x00, 0x05, 0x00, 0x19, 0x00, 0x19, 0x00, 0x0E, 0x00, 0x38, 0x00, 0x38, 0x00, 0x15, 0x00,
                0x38, 0x00, 0x38, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x07, 0x00, 0x07, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x00, 0x50, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x20, 0x03, 0x00, 0x09, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x07, 0x07,
                0x8C, 0x7D, 0x8C, 0x7D, 0x02, 0x02, 0x00, 0x40, 0x18, 0x00, 0x20, 0x00, 0x20, 0x00, 0x03, 0x03,
                0x14, 0x14, 0x01, 0x08, 0xC1, 0x41, 0x41, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x2D, 0x00, 0x0A, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00, 0x20, 0x00,
                0x30, 0x00, 0x30, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00, 0x07, 0x00, 0x07, 0x00,
                0x02, 0x00, 0x02, 0x00, 0x66, 0x06, 0x00, 0x00, 0x99, 0x09, 0x00, 0x00, 0x99, 0x09, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
                0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00,
                0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x4B, 0x00, 0x19, 0x00, 0x05, 0x00, 0xFA, 0x00, 0x19, 0x00, 0x03, 0x03, 0x0A, 0x0A,
                0xEF, 0x3F, 0xEF, 0x3F, 0x02, 0x04, 0x00, 0x40, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x03, 0x03,
                0x0A, 0x0A, 0x00, 0xB0, 0xB0, 0x3F, 0x3F, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x3C, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00,
                0x0C, 0x00, 0x0C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x33, 0x13, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xFF, 0xFF, 0xFF, 0x86, 0xFF, 0xFF, 0xFF,
                0x86, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
                0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08, 0x08,
                0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x0C, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x3C, 0x3C, 0x00, 0x1F, 0x1F, 0x42, 0x42, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x0A, 0x00,
                0x5A, 0x00, 0x14, 0x00, 0x14, 0x00, 0x14, 0x00, 0x48, 0x00, 0x48, 0x00, 0x48, 0x00, 0xC8, 0x00,
                0xC8, 0x00, 0xC8, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xC0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x20, 0x03, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x03, 0x03,
                0x94, 0x7E, 0x94, 0x7E, 0x02, 0x82, 0x00, 0x40, 0x0C, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x00, 0x00,
                0x0F, 0x0F, 0x00, 0x0A, 0x0A, 0x3E, 0x3E, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x3C, 0x00, 0x05, 0x00, 0x19, 0x00, 0x19, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x20, 0x00,
                0x20, 0x00, 0x20, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x90, 0x01, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0xB0, 0xDA, 0x0B, 0x02, 0xB0, 0xDA, 0x0B, 0x02, 0x01, 0x00, 0x03, 0x00,
                0x03, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x04, 0x05,
                0x5F, 0x3D, 0x5F, 0x3D, 0x02, 0x92, 0x02, 0x40, 0x10, 0x00, 0x1C, 0x00, 0x1C, 0x00, 0x03, 0x03,
                0x14, 0x0F, 0x00, 0x09, 0xC2, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x3C, 0x00, 0x0A, 0x00, 0x14, 0x00, 0x14, 0x00, 0x20, 0x00, 0x38, 0x00, 0x38, 0x00, 0x20, 0x00,
                0x38, 0x00, 0x38, 0x00, 0x2D, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00, 0x07, 0x00, 0x07, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x33, 0x1B, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x86, 0xFF, 0xFF, 0xFF, 0x86, 0xFF, 0xFF, 0xFF,
                0x86, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x07, 0x00, 0x00, 0x33, 0x07, 0x00, 0x00,
                0x33, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x32, 0x00, 0x00, 0x00, 0x02, 0x00, 0xC8, 0x00, 0xF4, 0x01, 0x07, 0x07, 0x09, 0x09,
                0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x04, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0xFF, 0xFF, 0x3E, 0x3E, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x2D, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00,
                0x0A, 0x00, 0x0A, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xC0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0xF0, 0x00, 0x00, 0xDB, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x0B, 0x0B,
                0xFF, 0x7F, 0xFF, 0x7F, 0x05, 0x00, 0x00, 0x40, 0xC8, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0x03, 0x03,
                0x3C, 0x3C, 0x00, 0xF8, 0xF8, 0x3C, 0x3C, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0xC8, 0x00,
                0xC8, 0x00, 0xC8, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00, 0x07, 0x00, 0x07, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00,
                0x33, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x20, 0x03, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x90, 0x01, 0x00,
                0x00, 0x90, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x5F, 0x23, 0x9F, 0x53, 0x01, 0x07, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x04, 0x04, 0x00, 0x04, 0x5F, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00,
                0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x28, 0x00, 0x08, 0x00,
                0x08, 0x00, 0x34, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00,
                0x00, 0x30, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00,
                0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x4B, 0x00, 0x19, 0x00, 0x05, 0x00, 0x0A, 0x00, 0x4B, 0x00, 0x01, 0x01, 0x01, 0x02,
                0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x02, 0x04, 0x40, 0x00, 0x00, 0x38, 0x00, 0x38, 0x00, 0x02, 0x02,
                0x05, 0x05, 0x00, 0x59, 0x58, 0x3C, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0F, 0x00,
                0x3C, 0x00, 0x05, 0x00, 0x19, 0x00, 0x19, 0x00, 0x0E, 0x00, 0x38, 0x00, 0x38, 0x00, 0x15, 0x00,
                0x38, 0x00, 0x38, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x07, 0x00, 0x07, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x00, 0x50, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
                0x00, 0x40, 0x06, 0x00, 0x61, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x07, 0x07,
                0x32, 0x7D, 0x32, 0x7D, 0x02, 0x02, 0x00, 0x40, 0x18, 0x00, 0x20, 0x00, 0x20, 0x00, 0x03, 0x03,
                0x14, 0x14, 0x01, 0x08, 0xC1, 0x41, 0x41, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x2D, 0x00, 0x0A, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00, 0x20, 0x00,
                0x30, 0x00, 0x30, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00, 0x07, 0x00, 0x07, 0x00,
                0x02, 0x00, 0x02, 0x00, 0x66, 0x06, 0x00, 0x00, 0x99, 0x09, 0x00, 0x00, 0x99, 0x09, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
                0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00,
                0x00, 0x20, 0x03, 0x00, 0x61, 0x0F, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00,
                0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x4B, 0x00, 0x19, 0x00, 0x05, 0x00, 0xFA, 0x00, 0x19, 0x00, 0x03, 0x03, 0x0A, 0x0A,
                0xEF, 0x3F, 0xEF, 0x3F, 0x02, 0x04, 0x00, 0x40, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x03, 0x03,
                0x0F, 0x0F, 0x00, 0x0E, 0x0E, 0x3F, 0x3F, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x3C, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x12, 0x00, 0x12, 0x00, 0x12, 0x00, 0x12, 0x00,
                0x12, 0x00, 0x12, 0x00, 0x5A, 0x00, 0x5A, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0x33, 0x13, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00, 0x33, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5D, 0xFF, 0xFF, 0xFF, 0x5D, 0xFF, 0xFF, 0xFF,
                0x5D, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x40, 0x06, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x64, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08, 0x08,
                0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x0C, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x3C, 0x3C, 0x00, 0x1F, 0x1F, 0x42, 0x42, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x0A, 0x00,
                0x5A, 0x00, 0x14, 0x00, 0x14, 0x00, 0x14, 0x00, 0x48, 0x00, 0x48, 0x00, 0x48, 0x00, 0xC8, 0x00,
                0xC8, 0x00, 0xC8, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xC0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x20, 0x03, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x03, 0x03,
                0x94, 0x7E, 0x94, 0x7E, 0x02, 0x82, 0x10, 0x40, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x0F, 0x0F, 0x00, 0x0A, 0x00, 0x3E, 0x3E, 0x03, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0F, 0x00,
                0x3C, 0x00, 0x05, 0x00, 0x19, 0x00, 0x19, 0x00, 0x18, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x20, 0x00,
                0x0C, 0x00, 0x0C, 0x00, 0xFF, 0x00, 0x05, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0x20, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x90, 0x01, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0xB0, 0xDA, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x04, 0x05,
                0x5F, 0x3D, 0x5F, 0x3D, 0x02, 0x92, 0x02, 0x40, 0x10, 0x00, 0x12, 0x00, 0x12, 0x00, 0x03, 0x03,
                0x14, 0x14, 0x00, 0x09, 0xC3, 0x40, 0x40, 0x02, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0F, 0x00,
                0x3C, 0x00, 0x0A, 0x00, 0x14, 0x00, 0x14, 0x00, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00, 0x20, 0x00,
                0x30, 0x00, 0x30, 0x00, 0x2D, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0x00, 0x07, 0x00, 0x07, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00, 0x99, 0x05, 0x00, 0x00,
                0x33, 0x1B, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00, 0x33, 0x1B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x86, 0xFF, 0xFF, 0xFF, 0x86, 0xFF, 0xFF, 0xFF,
                0x86, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xA0, 0x00, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
                0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00,
                0x33, 0x0B, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x33, 0x07, 0x00, 0x00, 0x33, 0x07, 0x00, 0x00,
                0x33, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x32, 0x00, 0x00, 0x00, 0x02, 0x00, 0xC8, 0x00, 0xF4, 0x01, 0x07, 0x07, 0x09, 0x09,
                0xFF, 0x7F, 0xFF, 0x7F, 0x02, 0x04, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0xFF, 0xFF, 0x3E, 0x3E, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x2D, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00,
                0x0A, 0x00, 0x0A, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xC0, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0xF0, 0x00, 0x00, 0xDB, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
                0x66, 0x06, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00, 0xCC, 0x04, 0x00, 0x00,
                0xCC, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x0B, 0x0B,
                0xFF, 0x7F, 0xFF, 0x7F, 0x05, 0x00, 0x00, 0x40, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x03, 0x03,
                0x3C, 0x3C, 0x00, 0xF8, 0xF8, 0x3C, 0x3C, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x0F, 0x00,
                0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00,
                0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x2D, 0x00, 0x2D, 0x00, 0x2D, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00,
                0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0xEB, 0x01, 0x00, 0x00,
                0xEB, 0x01, 0x00, 0x00, 0xEB, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00,
                0x00, 0x20, 0x03, 0x00, 0x38, 0x0F, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
                0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00, 0x66, 0x0E, 0x00, 0x00,
                0x66, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00
            });
        }
    }
}
